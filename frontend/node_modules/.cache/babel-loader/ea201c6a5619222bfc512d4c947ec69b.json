{"ast":null,"code":"var _jsxFileName = \"/home/cemal-pro/Documents/Repos/todo-app/frontend/src/components/App/container/ToDoPanel/ToDoContentPanel/container/SubTask.js\";\nimport React, { Fragment } from 'react';\nimport checkBoxIcon from \"../../../../../../assets/icons/checkbox-icon.svg\";\nimport checkBoxFilled from \"../../../../../../assets/icons/checkbox-filled-icon.svg\";\nimport removeIcon from \"../../../../../..//assets/icons/remove-icon.svg\";\nimport { findSubTaskInJSON, findCurrentListOfToDoInJSON, findSubTask } from '../../../../utils';\nimport '../view/ToDoContentPanelView.scss';\nexport default class SubTask extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isCompletedSubtask: false\n    };\n\n    this.renderSubTaskItem = () => {\n      if (this.props.selectedToDo === undefined) return;\n      return React.createElement(\"div\", {\n        className: \"subtask-wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"checkbox-btn\",\n        onClick: this.completeSubTask,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }, this.selectCheckBoxSource()), this.selectTextSource(), React.createElement(\"span\", {\n        className: \"remove-btn\",\n        onClick: this.removeSubTask,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        className: \"remove-icon\",\n        src: removeIcon,\n        alt: \"remove-icon\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      })));\n    };\n\n    this.selectCheckBoxSource = () => {\n      const isCompleted = this.props.subTask.isCompleted;\n\n      switch (isCompleted) {\n        case true:\n          return React.createElement(\"img\", {\n            className: \"checkbox-icon\",\n            src: checkBoxFilled,\n            alt: \"checkbox-icon\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 41\n            },\n            __self: this\n          });\n\n        default:\n          return React.createElement(\"img\", {\n            className: \"checkbox-icon\",\n            src: checkBoxIcon,\n            alt: \"checkbox-icon\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 42\n            },\n            __self: this\n          });\n      }\n    };\n\n    this.selectTextSource = () => {\n      const isCompleted = this.props.subTask.isCompleted;\n\n      switch (isCompleted) {\n        case true:\n          return React.createElement(\"h3\", {\n            className: \"completed-subtask-text\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 50\n            },\n            __self: this\n          }, \" \", this.props.subTask.subTaskName);\n\n        default:\n          return React.createElement(\"h3\", {\n            className: \"subtask-text\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 51\n            },\n            __self: this\n          }, \" \", this.props.subTask.subTaskName);\n      }\n    };\n\n    this.completeSubTask = () => {\n      if (this.props.selectedToDo.toDoStatus.isCompleted) return;\n      const subTaskStatus = this.state.isCompletedSubtask;\n      const currSubTask = findSubTaskInJSON(findCurrentListOfToDoInJSON(this.props.selectedToDo.listID), this.props.selectedToDo, this.props.subTask);\n      currSubTask.isCompleted = !subTaskStatus;\n      this.setState({\n        isCompletedSubtask: !subTaskStatus\n      });\n    };\n\n    this.removeSubTask = () => {\n      if (this.props.selectedToDo.toDoStatus.isCompleted) return;\n      const currentToDo = this.props.selectedToDo;\n      const index = findSubTask(findCurrentListOfToDoInJSON(this.props.selectedToDo.listID), currentToDo, this.props.subTask);\n\n      if (index !== undefined) {\n        currentToDo.toDoDetails.subTaskList.splice(index, 1);\n      }\n\n      this.props.updateSelectedToDo(currentToDo);\n    };\n  }\n\n  render() {\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }, this.renderSubTaskItem());\n  }\n\n}","map":{"version":3,"sources":["/home/cemal-pro/Documents/Repos/todo-app/frontend/src/components/App/container/ToDoPanel/ToDoContentPanel/container/SubTask.js"],"names":["React","Fragment","findSubTaskInJSON","findCurrentListOfToDoInJSON","findSubTask","SubTask","Component","state","isCompletedSubtask","renderSubTaskItem","props","selectedToDo","undefined","completeSubTask","selectCheckBoxSource","selectTextSource","removeSubTask","removeIcon","isCompleted","subTask","checkBoxFilled","checkBoxIcon","subTaskName","toDoStatus","subTaskStatus","currSubTask","listID","setState","currentToDo","index","toDoDetails","subTaskList","splice","updateSelectedToDo","render"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react';\n\nimport checkBoxIcon from '../../../../../../assets/icons/checkbox-icon.svg';\nimport checkBoxFilled from '../../../../../../assets/icons/checkbox-filled-icon.svg';\nimport removeIcon from '../../../../../..//assets/icons/remove-icon.svg';\n\nimport { findSubTaskInJSON, findCurrentListOfToDoInJSON, findSubTask } from '../../../../utils';\n\nimport '../view/ToDoContentPanelView.scss';\n\nexport default class SubTask extends React.Component {\n\n  state = {\n    isCompletedSubtask: false\n  }\n  render() {\n    return (\n      <Fragment>\n        { this.renderSubTaskItem() }\n      </Fragment>\n    );\n  }\n\n  renderSubTaskItem = () => {\n    if (this.props.selectedToDo === undefined) return;\n    return <div className=\"subtask-wrapper\">\n              <span className=\"checkbox-btn\" onClick= {this.completeSubTask}>\n               { this.selectCheckBoxSource() }\n              </span>\n              { this.selectTextSource() }\n              \n             <span className=\"remove-btn\" onClick= {this.removeSubTask}>\n               <img className=\"remove-icon\" src={removeIcon} alt=\"remove-icon\"></img>\n             </span>\n           </div>\n  }\n\n  selectCheckBoxSource = () => {\n    const isCompleted = this.props.subTask.isCompleted;\n    switch(isCompleted) {\n      case true: return <img className=\"checkbox-icon\" src={checkBoxFilled} alt=\"checkbox-icon\"></img>\n      default: return <img className=\"checkbox-icon\" src={checkBoxIcon} alt=\"checkbox-icon\"></img>\n\n    }\n  }\n\n  selectTextSource = () => {\n    const isCompleted = this.props.subTask.isCompleted;\n    switch(isCompleted) {\n      case true: return  <h3 className=\"completed-subtask-text\"> {this.props.subTask.subTaskName}</h3>\n      default: return <h3 className=\"subtask-text\"> {this.props.subTask.subTaskName}</h3>\n\n    }\n  }\n\n  completeSubTask = () => {\n    if (this.props.selectedToDo.toDoStatus.isCompleted) return;\n    \n    const subTaskStatus = this.state.isCompletedSubtask;\n    const currSubTask = findSubTaskInJSON(findCurrentListOfToDoInJSON(this.props.selectedToDo.listID), this.props.selectedToDo, this.props.subTask);\n\n    currSubTask.isCompleted = !subTaskStatus;\n\n    this.setState({ isCompletedSubtask: !subTaskStatus });\n\n\n  }\n\n  removeSubTask = () => {\n    if (this.props.selectedToDo.toDoStatus.isCompleted) return;\n\n    const currentToDo = this.props.selectedToDo;\n    const index = findSubTask(findCurrentListOfToDoInJSON(this.props.selectedToDo.listID), currentToDo, this.props.subTask);\n\n    if (index !== undefined) {\n      currentToDo.toDoDetails.subTaskList.splice(index, 1);\n    }\n\n    this.props.updateSelectedToDo(currentToDo);\n  }\n} "]},"metadata":{},"sourceType":"module"}