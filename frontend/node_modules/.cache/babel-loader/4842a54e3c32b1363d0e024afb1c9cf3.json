{"ast":null,"code":"var _jsxFileName = \"/home/cemal-pro/Documents/Repos/todo-app/frontend/src/components/App/container/ToDoPanel/container/DueTimePanel.js\";\nimport React, { Fragment } from 'react';\nimport { Button } from 'react-bootstrap';\nimport ToDoItem from '../container/ToDoItem';\nimport Navbar from './Navbar';\nimport todayIcon from \"../../../../../assets/background-images/today-big-icon.svg\";\nimport weekIcon from \"../../../../../assets/background-images/this-week-big-icon.svg\";\nimport appJson from '../../../../../app';\nimport { groupByListID, orderToDoSet, getAllToDos } from '../../../utils';\nimport '../view/ToDoPanelView.scss';\n\nconst shortid = require('shortid');\n\nexport default class DueTimePanel extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.setToDos = () => {\n      this.setState({\n        toDos: getAllToDos()\n      }, () => {\n        this.searchInSet(this.state.toDos);\n      });\n    };\n\n    this.searchInSet = todos => {\n      const foundedToDos = this.search(todos);\n      const toDoSet = groupByListID(foundedToDos);\n      const orderedToDoSet = orderToDoSet(toDoSet);\n      this.setState({\n        toDoSet: orderedToDoSet\n      });\n    };\n\n    this.search = list => {\n      if (list === undefined) return;\n      const currDate = new Date().toDateString();\n      return list.filter(toDoItem => {\n        if (toDoItem.toDoDetails.dueDate === null) return;\n        let selectedDate = toDoItem.toDoDetails.dueDate;\n\n        if (this.props.selectedList.listID === 2) {\n          if (selectedDate.toDateString() === currDate) return true;\n          return false;\n        } else {\n          if (selectedDate.toDateString().split(\" \")[3] === currDate.split(\" \")[3]) {\n            if (selectedDate.toDateString().split(\" \")[2] - currDate.split(\" \")[2] < 7) {\n              return true;\n            }\n\n            return false;\n          }\n        }\n\n        return false;\n      });\n    };\n\n    this.updateToDo = toDoItem => {\n      this.props.updateToDo(toDoItem);\n    };\n\n    this.updateListItems = updatedListItems => {\n      this.setState({\n        listItems: updatedListItems\n      }, () => {\n        this.setToDos();\n      });\n    };\n\n    this.renderToDoPanel = toDoSet => {\n      if (toDoSet === undefined) return;\n\n      if (toDoSet.length === 0) {\n        return this.renderNotFoundPanel();\n      } else {\n        return React.createElement(\"div\", {\n          className: \"all-items-container\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 87\n          },\n          __self: this\n        }, React.createElement(Navbar, {\n          newSelectedListName: this.props.selectedList.listName,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 88\n          },\n          __self: this\n        }), this.renderToDoSet());\n      }\n    };\n\n    this.renderNotFoundPanel = () => {\n      return React.createElement(\"div\", {\n        className: \"not-found-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, \" \", this.renderNotFoundPageSrc(), \" \");\n    };\n\n    this.renderNotFoundPageSrc = () => {\n      if (this.props.selectedList.listID === undefined) return;\n\n      switch (this.props.selectedList.listID) {\n        case 2:\n          return React.createElement(Fragment, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 101\n            },\n            __self: this\n          }, React.createElement(\"img\", {\n            className: \"empty-list-img\",\n            src: todayIcon,\n            alt: \"today-img\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 102\n            },\n            __self: this\n          }), React.createElement(\"h2\", {\n            className: \"empty-list-text\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 103\n            },\n            __self: this\n          }, \"You have no to-do due today\"));\n\n        default:\n          return React.createElement(Fragment, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 105\n            },\n            __self: this\n          }, React.createElement(\"img\", {\n            className: \"empty-list-img\",\n            src: weekIcon,\n            alt: \"week-img\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 106\n            },\n            __self: this\n          }), React.createElement(\"h2\", {\n            className: \"empty-list-text\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 107\n            },\n            __self: this\n          }, \"You have no to-do due this week\"));\n      }\n    };\n\n    this.renderToDoSet = () => {\n      const toDoSet = this.state.toDoSet;\n\n      if (toDoSet !== undefined) {\n        return toDoSet.map(toDoGroup => {\n          const listName = toDoGroup[0].listName;\n          return React.createElement(\"div\", {\n            className: \"todo-items-container\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 117\n            },\n            __self: this\n          }, React.createElement(Button, {\n            variant: \"info\",\n            className: \"list-group-tag\",\n            onClick: () => this.renderSelectedList(listName),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 118\n            },\n            __self: this\n          }, listName), this.renderToDoGroupItem(toDoGroup));\n        });\n      }\n    };\n\n    this.renderToDoGroupItem = toDoGroup => {\n      const listItems = appJson.listItems;\n      const currentIndex = listItems.findIndex(listItem => listItem.listID === toDoGroup[0].listID);\n      const selectedList = listItems[currentIndex];\n      return toDoGroup.map(toDoItem => {\n        return React.createElement(Fragment, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 133\n          },\n          __self: this\n        }, React.createElement(ToDoItem, {\n          selectedList: selectedList,\n          toDoItem: toDoItem,\n          key: shortid.generate(),\n          updateList: this.props.updateThisSelectedList,\n          isSearchRendering: true,\n          updateThisSearchPanel: this.updateListItems,\n          updateToDo: this.updateToDo,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 134\n          },\n          __self: this\n        }));\n      });\n    };\n\n    this.renderSelectedList = listName => {\n      const listItems = appJson.listItems;\n      const currentIndex = listItems.findIndex(listItem => listItem.listName === listName);\n      const selectedList = listItems[currentIndex];\n      this.props.updateSelectedList(selectedList);\n    };\n\n    this.state = {\n      toDos: [],\n      toDoSet: []\n    };\n  }\n\n  componentWillMount() {\n    this.setToDos();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.selectedList.listID !== prevProps.selectedList.listID) this.setToDos();\n  }\n\n  render() {\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, \" \", this.renderToDoPanel(this.state.toDoSet), \" \");\n  }\n\n}","map":{"version":3,"sources":["/home/cemal-pro/Documents/Repos/todo-app/frontend/src/components/App/container/ToDoPanel/container/DueTimePanel.js"],"names":["React","Fragment","Button","ToDoItem","Navbar","appJson","groupByListID","orderToDoSet","getAllToDos","shortid","require","DueTimePanel","Component","constructor","props","setToDos","setState","toDos","searchInSet","state","todos","foundedToDos","search","toDoSet","orderedToDoSet","list","undefined","currDate","Date","toDateString","filter","toDoItem","toDoDetails","dueDate","selectedDate","selectedList","listID","split","updateToDo","updateListItems","updatedListItems","listItems","renderToDoPanel","length","renderNotFoundPanel","listName","renderToDoSet","renderNotFoundPageSrc","todayIcon","weekIcon","map","toDoGroup","renderSelectedList","renderToDoGroupItem","currentIndex","findIndex","listItem","generate","updateThisSelectedList","updateSelectedList","componentWillMount","componentDidUpdate","prevProps","render"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react';\nimport { Button } from 'react-bootstrap';\n\nimport ToDoItem from '../container/ToDoItem';\nimport Navbar from './Navbar';\n\nimport todayIcon from '../../../../../assets/background-images/today-big-icon.svg';\nimport weekIcon from '../../../../../assets/background-images/this-week-big-icon.svg';\n\nimport appJson from '../../../../../app';\n\nimport { groupByListID, orderToDoSet, getAllToDos } from '../../../utils';\n\nimport '../view/ToDoPanelView.scss';\n\nconst shortid = require('shortid');\n\nexport default class DueTimePanel extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      toDos: [],\n      toDoSet: []\n    };\n  }\n\n  componentWillMount() { this.setToDos() }\n  \n  componentDidUpdate(prevProps) { \n    if (this.props.selectedList.listID !== prevProps.selectedList.listID) this.setToDos();\n  }\n\n  setToDos = () => { \n    this.setState({ toDos: getAllToDos() }, () => {\n      this.searchInSet(this.state.toDos);\n    })\n  }\n\n  searchInSet = (todos) => { \n    const foundedToDos = this.search(todos);\n    const toDoSet = groupByListID(foundedToDos);\n    const orderedToDoSet = orderToDoSet(toDoSet);\n\n    this.setState({ toDoSet: orderedToDoSet });\n  }\n\n  search = (list) => {\n    if (list === undefined) return;\n    const currDate = new Date().toDateString();\n    return list.filter((toDoItem) => {\n      if (toDoItem.toDoDetails.dueDate === null) return;\n      let selectedDate = toDoItem.toDoDetails.dueDate;\n      if (this.props.selectedList.listID === 2) {\n        if (selectedDate.toDateString() === currDate) return true;\n        return false;\n      } else {\n        if (selectedDate.toDateString().split(\" \")[3] === currDate.split(\" \")[3]) {\n          if (selectedDate.toDateString().split(\" \")[2] - currDate.split(\" \")[2] < 7) {\n            return true;\n          }\n          return false;\n        }\n      }\n      return false;\n    });\n  }\n\n  updateToDo = (toDoItem) => { this.props.updateToDo(toDoItem) }\n\n  updateListItems = (updatedListItems) => {\n    this.setState({ listItems: updatedListItems }, () => {\n      this.setToDos();\n    });\n  }\n\n  render() { \n    return <Fragment> { this.renderToDoPanel(this.state.toDoSet) } </Fragment>\n  }\n\n  renderToDoPanel = (toDoSet) => {\n    if (toDoSet === undefined) return;\n\n    if (toDoSet.length === 0) {\n      return this.renderNotFoundPanel();\n    } else {\n      return <div className=\"all-items-container\">\n         <Navbar newSelectedListName= {this.props.selectedList.listName}></Navbar>\n         { this.renderToDoSet() } \n         </div>\n    }\n  }\n\n  renderNotFoundPanel = () => {\n    return <div className=\"not-found-container\"> { this.renderNotFoundPageSrc() } </div>\n  }\n\n  renderNotFoundPageSrc = () => {\n    if (this.props.selectedList.listID === undefined) return;\n    switch (this.props.selectedList.listID) {\n      case 2    : return <Fragment>\n                          <img className=\"empty-list-img\" src={todayIcon} alt=\"today-img\"></img>\n                          <h2 className=\"empty-list-text\">You have no to-do due today</h2>\n                       </Fragment>\n      default   : return <Fragment>\n                          <img className=\"empty-list-img\" src={weekIcon} alt=\"week-img\"></img>\n                          <h2 className=\"empty-list-text\">You have no to-do due this week</h2>\n                        </Fragment>\n    }\n  }\n\n  renderToDoSet = () => {\n    const toDoSet = this.state.toDoSet;\n    if (toDoSet !== undefined) {\n        return toDoSet.map((toDoGroup => {\n          const listName = toDoGroup[0].listName;\n          return <div className=\"todo-items-container\">\n                   <Button variant=\"info\" className=\"list-group-tag\" onClick={() =>this.renderSelectedList(listName)}>\n                     {listName} \n                   </Button>\n                   {this.renderToDoGroupItem(toDoGroup)}\n                 </div>\n        }))\n    }\n  }\n\n  renderToDoGroupItem = (toDoGroup) => {\n    const listItems = appJson.listItems;\n    const currentIndex = listItems.findIndex(listItem => listItem.listID === toDoGroup[0].listID);\n    const selectedList = listItems[currentIndex];\n    \n    return toDoGroup.map((toDoItem) => {\n      return <Fragment>\n              <ToDoItem selectedList= {selectedList} toDoItem={toDoItem} key={shortid.generate()}\n              updateList= {this.props.updateThisSelectedList} isSearchRendering= {true}\n              updateThisSearchPanel= {this.updateListItems} updateToDo= {this.updateToDo} />\n            </Fragment>\n    })\n  }\n\n  renderSelectedList = (listName) => {\n    const listItems = appJson.listItems;\n    const currentIndex = listItems.findIndex(listItem => listItem.listName === listName);\n    const selectedList = listItems[currentIndex];\n    \n    this.props.updateSelectedList(selectedList);\n  }\n\n\n} \n"]},"metadata":{},"sourceType":"module"}