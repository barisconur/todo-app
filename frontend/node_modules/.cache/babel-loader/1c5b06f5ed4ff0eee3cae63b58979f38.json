{"ast":null,"code":"var _jsxFileName = \"/home/cemal-pro/Documents/Repos/todo-app/frontend/src/components/App/container/ToDoPanel/view/ToDoPanelView.js\";\nimport React, { Fragment } from 'react';\nimport { Container, Row, Col, Button } from 'react-bootstrap';\nimport inboxIcon from \"../../../../../assets/background-images/inbox-big-icon.svg\";\nimport listIcon from \"../../../../../assets/background-images/list-big-icon.svg\";\nimport AddToDo from '../container/AddToDo';\nimport Navbar from '../container/Navbar';\nimport ToDoItem from '../container/ToDoItem';\nimport SearchPanel from '../container/SearchPanel';\nimport DueTimePanel from '../container/DueTimePanel';\nimport StarredPanel from '../container/StarredPanel';\nimport ToDoContentPanelView from '../ToDoContentPanel/view/ToDoContentPanelView';\nimport '../view/ToDoPanelView.scss';\n\nconst shortid = require('shortid');\n\nconst CONTENT_PANEL_SIZE = 3,\n      TODO_PANEL_SIZE = 9;\nexport default class ToDoPanelView extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.sendSelectedListToAppView = selectedList => {\n      this.props.updateSelectedList(selectedList);\n    };\n\n    this.setSelectedToDo = toDo => {\n      this.setState({\n        selectedToDo: toDo\n      });\n    };\n\n    this.displayToDoPanel = () => {\n      if (this.props.searchedWord.length !== 0) {\n        return React.createElement(SearchPanel, {\n          searchedWord: this.props.searchedWord,\n          updateSelectedList: this.sendSelectedListToAppView,\n          updateToDo: this.setSelectedToDo,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 56\n          },\n          __self: this\n        });\n      } else if (this.props.selectedList !== undefined) {\n        if (this.props.selectedList.listID >= 4 || this.props.selectedList.listID === 0) {\n          return this.renderToDoPanel();\n        } else {\n          switch (this.props.selectedList.listID) {\n            case 2:\n              return React.createElement(DueTimePanel, {\n                selectedList: this.props.selectedList,\n                selectedToDo: this.props.selectedToDo,\n                updateSelectedList: this.sendSelectedListToAppView,\n                updateToDo: this.setSelectedToDo,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 63\n                },\n                __self: this\n              });\n\n            case 3:\n              return React.createElement(DueTimePanel, {\n                selectedList: this.props.selectedList,\n                selectedToDo: this.props.selectedToDo,\n                updateSelectedList: this.sendSelectedListToAppView,\n                updateToDo: this.setSelectedToDo,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 66\n                },\n                __self: this\n              });\n\n            default:\n              return React.createElement(StarredPanel, {\n                selectedList: this.props.selectedList,\n                selectedToDo: this.props.selectedToDo,\n                updateSelectedList: this.sendSelectedListToAppView,\n                updateToDo: this.setSelectedToDo,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 69\n                },\n                __self: this\n              });\n          }\n        }\n      }\n    };\n\n    this.renderToDoPanel = () => {\n      return React.createElement(\"div\", {\n        className: \"all-items-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, React.createElement(Navbar, {\n        newSelectedListName: this.props.selectedList.listName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }), this.renderAddToDoComponent(), this.renderOpeningScene(), React.createElement(\"div\", {\n        className: \"completed-items-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, this.showCompletedButton(), this.renderCompletedItems()));\n    };\n\n    this.renderAddToDoComponent = () => {\n      return React.createElement(AddToDo, {\n        selectedList: this.props.selectedList,\n        updateList: this.sendSelectedListToAppView,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      });\n    };\n\n    this.renderOpeningScene = () => {\n      if (this.props.selectedList.toDoItems.length === 0) {\n        return this.renderEmptyListPanel();\n      } else {\n        return React.createElement(\"div\", {\n          className: \"todo-items-container\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99\n          },\n          __self: this\n        }, this.renderToDoItems());\n      }\n    };\n\n    this.renderEmptyListPanel = () => {\n      return React.createElement(\"div\", {\n        className: \"empty-todo-panel-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"empty-todo-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, \" \", this.renderEmptyListSrc(), \" \"));\n    };\n\n    this.renderEmptyListSrc = () => {\n      const selectedListName = this.props.selectedList.listName;\n\n      switch (selectedListName) {\n        case 'Inbox':\n          return React.createElement(Fragment, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 115\n            },\n            __self: this\n          }, React.createElement(\"img\", {\n            className: \"empty-list-img\",\n            src: inboxIcon,\n            alt: \"inbox-img\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 116\n            },\n            __self: this\n          }), React.createElement(\"h2\", {\n            className: \"empty-list-text\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 117\n            },\n            __self: this\n          }, selectedListName + ' is empty. Please add some to-dos'));\n\n        default:\n          return React.createElement(Fragment, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 119\n            },\n            __self: this\n          }, React.createElement(\"img\", {\n            className: \"empty-list-img\",\n            src: listIcon,\n            alt: \"list-img\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 120\n            },\n            __self: this\n          }), React.createElement(\"h2\", {\n            className: \"empty-list-text\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 121\n            },\n            __self: this\n          }, selectedListName + ' is empty. Please add some to-dos'));\n      }\n    };\n\n    this.renderToDoItems = () => {\n      const selectedList = this.props.selectedList;\n      let incompletedToDos = [];\n\n      if (selectedList !== undefined) {\n        const allToDos = selectedList.toDoItems;\n\n        if (allToDos.length !== 0) {\n          allToDos.forEach(toDo => {\n            if (!toDo.toDoStatus.isCompleted) incompletedToDos.push(toDo);\n          });\n        }\n      }\n\n      return incompletedToDos.map(toDoItem => {\n        return React.createElement(ToDoItem, {\n          selectedList: selectedList,\n          toDoItem: toDoItem,\n          key: shortid.generate(),\n          updateList: this.sendSelectedListToAppView,\n          updateToDo: this.setSelectedToDo,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 138\n          },\n          __self: this\n        });\n      });\n    };\n\n    this.showCompletedButton = () => {\n      const selectedList = this.props.selectedList;\n      let completedToDos = [];\n\n      if (selectedList.toDoItems !== undefined) {\n        const allToDos = selectedList.toDoItems;\n        if (allToDos.length !== 0) allToDos.forEach(toDo => {\n          if (toDo.toDoStatus.isCompleted) completedToDos.push(toDo);\n        });\n        if (completedToDos.length === 0) return;\n        return React.createElement(Button, {\n          className: \"show-completed-btn\",\n          variant: \"dark\",\n          size: \"sm\",\n          onClick: this.toggleShowButton,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 152\n          },\n          __self: this\n        }, \"SHOW COMPLETED TO-DOS\");\n      }\n    };\n\n    this.toggleShowButton = () => {\n      this.setState({\n        isCompletedShown: !this.state.isCompletedShown\n      });\n    };\n\n    this.renderCompletedItems = () => {\n      if (!this.state.isCompletedShown) return;\n      const selectedList = this.props.selectedList;\n      let completedToDos = [];\n\n      if (selectedList !== undefined) {\n        const allToDos = selectedList.toDoItems;\n        if (allToDos.length !== 0) allToDos.forEach(toDo => {\n          if (toDo.toDoStatus.isCompleted) completedToDos.push(toDo);\n        });\n        return completedToDos.map(toDoItem => {\n          return React.createElement(ToDoItem, {\n            selectedList: selectedList,\n            toDoItem: toDoItem,\n            key: shortid.generate(),\n            updateList: this.sendSelectedListToAppView,\n            updateToDo: this.setSelectedToDo,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 171\n            },\n            __self: this\n          });\n        });\n      }\n    };\n\n    this.renderContentPanel = () => {\n      return React.createElement(Col, {\n        sm: CONTENT_PANEL_SIZE,\n        className: \"todo-content-panel-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }, React.createElement(ToDoContentPanelView, {\n        selectedList: this.props.selectedList,\n        selectedToDo: this.state.selectedToDo,\n        setSelectedList: this.sendSelectedListToAppView,\n        setSelectedToDo: this.setSelectedToDo,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      }));\n    };\n\n    this.state = {\n      selectedToDo: undefined,\n      isCompletedShown: false\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.selectedList !== prevProps.selectedList) {\n      this.setState({\n        isCompletedShown: false\n      });\n    }\n  }\n\n  render() {\n    return React.createElement(Container, {\n      id: \"todo-panel-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, React.createElement(Row, {\n      id: \"todo-panel-row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, React.createElement(Col, {\n      sm: TODO_PANEL_SIZE,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, \" \", this.displayToDoPanel(), \" \"), this.renderContentPanel()));\n  }\n\n}","map":{"version":3,"sources":["/home/cemal-pro/Documents/Repos/todo-app/frontend/src/components/App/container/ToDoPanel/view/ToDoPanelView.js"],"names":["React","Fragment","Container","Row","Col","Button","AddToDo","Navbar","ToDoItem","SearchPanel","DueTimePanel","StarredPanel","ToDoContentPanelView","shortid","require","CONTENT_PANEL_SIZE","TODO_PANEL_SIZE","ToDoPanelView","Component","constructor","props","sendSelectedListToAppView","selectedList","updateSelectedList","setSelectedToDo","toDo","setState","selectedToDo","displayToDoPanel","searchedWord","length","undefined","listID","renderToDoPanel","listName","renderAddToDoComponent","renderOpeningScene","showCompletedButton","renderCompletedItems","toDoItems","renderEmptyListPanel","renderToDoItems","renderEmptyListSrc","selectedListName","inboxIcon","listIcon","incompletedToDos","allToDos","forEach","toDoStatus","isCompleted","push","map","toDoItem","generate","completedToDos","toggleShowButton","isCompletedShown","state","renderContentPanel","componentDidUpdate","prevProps","render"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react';\nimport { Container, Row, Col, Button } from 'react-bootstrap';\n\nimport inboxIcon from '../../../../../assets/background-images/inbox-big-icon.svg';\nimport listIcon from '../../../../../assets/background-images/list-big-icon.svg';\n\nimport AddToDo from '../container/AddToDo';\nimport Navbar from '../container/Navbar';\nimport ToDoItem from '../container/ToDoItem';\n\nimport SearchPanel from '../container/SearchPanel';\nimport DueTimePanel from '../container/DueTimePanel';\nimport StarredPanel from '../container/StarredPanel';\n\nimport ToDoContentPanelView  from '../ToDoContentPanel/view/ToDoContentPanelView';\n\nimport '../view/ToDoPanelView.scss';\n\nconst shortid = require('shortid');\n\nconst CONTENT_PANEL_SIZE = 3, TODO_PANEL_SIZE = 9;\n\nexport default class ToDoPanelView extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      selectedToDo: undefined,\n      isCompletedShown: false\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.selectedList !== prevProps.selectedList) { \n      this.setState({ isCompletedShown: false });\n    }\n  }\n\n  sendSelectedListToAppView = (selectedList) => { this.props.updateSelectedList(selectedList) }\n\n  setSelectedToDo = (toDo) => { this.setState({ selectedToDo: toDo }) }\n\n  render() {\n    return (\n      <Container id=\"todo-panel-container\">\n        <Row id=\"todo-panel-row\">\n          <Col sm={TODO_PANEL_SIZE}> { this.displayToDoPanel() } </Col>\n          { this.renderContentPanel() }\n        </Row>\n      </Container>\n    );\n  }\n\n  displayToDoPanel = () => {\n    if (this.props.searchedWord.length !== 0) {\n      return <SearchPanel searchedWord={this.props.searchedWord} updateSelectedList={this.sendSelectedListToAppView} \n      updateToDo={this.setSelectedToDo}/>\n    } else if (this.props.selectedList !== undefined) {\n      if (this.props.selectedList.listID >= 4 || this.props.selectedList.listID === 0) {\n        return this.renderToDoPanel();\n      } else {\n        switch(this.props.selectedList.listID) {\n          case 2: return <DueTimePanel selectedList={this.props.selectedList}  selectedToDo={this.props.selectedToDo}\n          updateSelectedList={this.sendSelectedListToAppView} updateToDo={this.setSelectedToDo}/> \n  \n          case 3: return <DueTimePanel selectedList={this.props.selectedList} selectedToDo={this.props.selectedToDo}\n          updateSelectedList={this.sendSelectedListToAppView} updateToDo={this.setSelectedToDo}/> \n  \n          default: return <StarredPanel selectedList={this.props.selectedList} selectedToDo={this.props.selectedToDo}\n          updateSelectedList={this.sendSelectedListToAppView} updateToDo={this.setSelectedToDo}/> \n       }\n      }\n    }\n  }\n  \n  renderToDoPanel = () => {\n    return ( \n      <div className=\"all-items-container\">\n        <Navbar newSelectedListName= {this.props.selectedList.listName}/>\n         { this.renderAddToDoComponent() }\n         { this.renderOpeningScene() }\n\n         <div className=\"completed-items-container\">\n          { this.showCompletedButton() }\n          { this.renderCompletedItems() }\n        </div>\n      </div>\n    )\n  }\n\n  renderAddToDoComponent = () => {\n    return <AddToDo selectedList={this.props.selectedList} updateList={this.sendSelectedListToAppView}/> \n  }\n\n  renderOpeningScene = () => {\n    if (this.props.selectedList.toDoItems.length === 0) {\n      return this.renderEmptyListPanel();\n    } else {\n      return  <div className=\"todo-items-container\">\n                { this.renderToDoItems() }\n              </div>        \n    }\n  }\n\n  renderEmptyListPanel = () => {\n    return <div className=\"empty-todo-panel-container\">\n            <div className=\"empty-todo-container\"> { this.renderEmptyListSrc() } </div>\n          </div>\n    \n  }\n\n  renderEmptyListSrc = () => {\n    const selectedListName = this.props.selectedList.listName;\n    switch(selectedListName) {\n      case 'Inbox'    : return <Fragment>\n                                <img className=\"empty-list-img\" src={inboxIcon} alt=\"inbox-img\"></img>\n                                <h2 className=\"empty-list-text\">{selectedListName + ' is empty. Please add some to-dos'}</h2>    \n                              </Fragment>\n      default         : return <Fragment>\n                                <img className=\"empty-list-img\" src={listIcon} alt=\"list-img\"></img>\n                                <h2 className=\"empty-list-text\">{selectedListName + ' is empty. Please add some to-dos'}</h2> \n                              </Fragment>\n    }\n  }\n  renderToDoItems = () => {\n    const selectedList = this.props.selectedList;\n    let incompletedToDos = [];\n\n    if (selectedList !== undefined) {\n      const allToDos = selectedList.toDoItems;\n\n      if (allToDos.length !== 0) {\n        allToDos.forEach((toDo) => {if (!toDo.toDoStatus.isCompleted) incompletedToDos.push(toDo);  \n        })\n      }\n    }\n    return incompletedToDos.map((toDoItem)  => {\n      return <ToDoItem selectedList= {selectedList} toDoItem= {toDoItem} key={shortid.generate()}\n      updateList= {this.sendSelectedListToAppView} updateToDo= {this.setSelectedToDo}/>\n    })\n  } \n\n  showCompletedButton = () => {\n    const selectedList = this.props.selectedList;\n    let completedToDos = [];\n    \n    if (selectedList.toDoItems !== undefined) {\n      const allToDos = selectedList.toDoItems;\n      if (allToDos.length !== 0) allToDos.forEach((toDo) => { if (toDo.toDoStatus.isCompleted) completedToDos.push(toDo) })\n      \n      if (completedToDos.length === 0) return;\n        return <Button className=\"show-completed-btn\" variant=\"dark\" size=\"sm\" onClick={this.toggleShowButton}>\n                SHOW COMPLETED TO-DOS\n              </Button>\n    }\n  }\n\n  toggleShowButton = () => {this.setState({ isCompletedShown: !this.state.isCompletedShown })}\n  \n  renderCompletedItems = () => {\n    if(!this.state.isCompletedShown) return;  \n\n    const selectedList = this.props.selectedList;\n    let completedToDos = [];\n\n    if (selectedList !== undefined) {\n      const allToDos = selectedList.toDoItems;\n      if (allToDos.length !== 0) allToDos.forEach((toDo) => { if (toDo.toDoStatus.isCompleted) completedToDos.push(toDo) })\n\n      return completedToDos.map((toDoItem) => {\n        return <ToDoItem selectedList= {selectedList} toDoItem={toDoItem} key={shortid.generate()}\n        updateList={this.sendSelectedListToAppView} updateToDo={this.setSelectedToDo}/>\n      })\n    }\n  }\n\n  renderContentPanel = () => {\n    return <Col sm={CONTENT_PANEL_SIZE} className=\"todo-content-panel-container\">\n            <ToDoContentPanelView selectedList={this.props.selectedList} selectedToDo={this.state.selectedToDo}\n            setSelectedList={this.sendSelectedListToAppView} setSelectedToDo={this.setSelectedToDo}/>\n            </Col>\n  }\n}"]},"metadata":{},"sourceType":"module"}