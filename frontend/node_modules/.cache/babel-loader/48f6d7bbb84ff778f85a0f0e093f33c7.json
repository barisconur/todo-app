{"ast":null,"code":"var _jsxFileName = \"/home/cemal-pro/Documents/Repos/todo-app/frontend/src/components/App/container/ToDoPanel/ToDoContentPanel/container/AddReminder.js\";\nimport React, { Fragment } from 'react';\nimport DatePicker from 'react-datepicker';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport reminderIcon from \"../../../../../../assets/icons/reminder-icon.svg\";\nimport { findCurrentToDoInJSON, findCurrentListOfToDoInJSON } from '../../../../utils';\nimport '../view/ToDoContentPanelView.scss';\nexport default class AddReminder extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderReminderDatePicker = () => {\n      if (this.props.selectedToDo === undefined) return;\n\n      if (this.props.selectedToDo.toDoStatus.isCompleted) {\n        return React.createElement(DatePicker, {\n          placeholderText: \"Set reminder\",\n          minDate: new Date(),\n          selected: this.readReminderDateFromJSON(),\n          showTimeInput: true,\n          timeFormat: \"HH:mm\",\n          timeInputLabel: \"Time: \",\n          dateFormat: \"MMMM d, yyyy h:mm aa\",\n          onChange: this.handleChange,\n          disabled: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 28\n          },\n          __self: this\n        });\n      } else {\n        return React.createElement(DatePicker, {\n          placeholderText: \"Set reminder\",\n          minDate: new Date(),\n          selected: this.readReminderDateFromJSON(),\n          isClearable: true,\n          showTimeInput: true,\n          timeFormat: \"HH:mm\",\n          timeInputLabel: \"Time: \",\n          dateFormat: \"MMMM d, yyyy h:mm aa\",\n          onChange: this.handleChange,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 38\n          },\n          __self: this\n        });\n      }\n    };\n\n    this.handleChange = date => {\n      this.updateReminderDateInJSON(date, this.props.selectedToDo);\n    };\n\n    this.updateReminderDateInJSON = (date, toDo) => {\n      const currentList = findCurrentListOfToDoInJSON(this.props.selectedToDo.listID);\n      const currentToDo = findCurrentToDoInJSON(currentList, toDo);\n      currentToDo.toDoDetails.reminderDate = date;\n      this.props.updateSelectedToDo(currentToDo);\n    };\n\n    this.readReminderDateFromJSON = () => {\n      const currentList = findCurrentListOfToDoInJSON(this.props.selectedToDo.listID);\n      const currentToDo = findCurrentToDoInJSON(currentList, this.props.selectedToDo);\n      if (currentToDo === undefined) return; // if selected list is changes\n\n      return currentToDo.toDoDetails.reminderDate;\n    };\n  }\n\n  render() {\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"reminder-date-btn\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      className: \"reminder-icon\",\n      src: reminderIcon,\n      alt: \"reminder-icon\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    })), this.renderReminderDatePicker());\n  }\n\n}","map":{"version":3,"sources":["/home/cemal-pro/Documents/Repos/todo-app/frontend/src/components/App/container/ToDoPanel/ToDoContentPanel/container/AddReminder.js"],"names":["React","Fragment","DatePicker","findCurrentToDoInJSON","findCurrentListOfToDoInJSON","AddReminder","Component","renderReminderDatePicker","props","selectedToDo","undefined","toDoStatus","isCompleted","Date","readReminderDateFromJSON","handleChange","date","updateReminderDateInJSON","toDo","currentList","listID","currentToDo","toDoDetails","reminderDate","updateSelectedToDo","render","reminderIcon"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react';\nimport DatePicker from 'react-datepicker';\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nimport reminderIcon from '../../../../../../assets/icons/reminder-icon.svg';\n\nimport { findCurrentToDoInJSON, findCurrentListOfToDoInJSON } from '../../../../utils';\n\nimport '../view/ToDoContentPanelView.scss';\n\nexport default class AddReminder extends React.Component {\n\n  render() {\n    return (\n      <Fragment>\n        <span className=\"reminder-date-btn\">\n          <img className=\"reminder-icon\" src={reminderIcon} alt=\"reminder-icon\"></img>\n        </span>\n        { this.renderReminderDatePicker() }\n      </Fragment>\n    );\n  }\n\n  renderReminderDatePicker = () => {\n    if (this.props.selectedToDo === undefined) return;\n\n    if (this.props.selectedToDo.toDoStatus.isCompleted) {\n      return <DatePicker placeholderText=\"Set reminder\" \n              minDate={new Date()}\n              selected={this.readReminderDateFromJSON()}\n              showTimeInput\n              timeFormat=\"HH:mm\"\n              timeInputLabel=\"Time: \"\n              dateFormat=\"MMMM d, yyyy h:mm aa\"\n              onChange={this.handleChange}\n              disabled={true} />\n    } else {\n      return  <DatePicker placeholderText=\"Set reminder\" \n              minDate={new Date()}\n              selected={this.readReminderDateFromJSON()}\n              isClearable={true}\n              showTimeInput\n              timeFormat=\"HH:mm\"\n              timeInputLabel=\"Time: \"\n              dateFormat=\"MMMM d, yyyy h:mm aa\"\n              onChange={this.handleChange}/>\n    }\n  }\n\n  handleChange = (date) => { this.updateReminderDateInJSON(date, this.props.selectedToDo) }\n\n  updateReminderDateInJSON = (date, toDo) => {\n    const currentList = findCurrentListOfToDoInJSON(this.props.selectedToDo.listID);\n    const currentToDo = findCurrentToDoInJSON(currentList, toDo);\n\n    currentToDo.toDoDetails.reminderDate = date; \n\n    this.props.updateSelectedToDo(currentToDo);\n  }\n\n\n  readReminderDateFromJSON = () => {\n    const currentList = findCurrentListOfToDoInJSON(this.props.selectedToDo.listID);\n    const currentToDo = findCurrentToDoInJSON(currentList, this.props.selectedToDo);\n\n    if (currentToDo === undefined) return; // if selected list is changes\n\n    return currentToDo.toDoDetails.reminderDate;\n  }\n}"]},"metadata":{},"sourceType":"module"}