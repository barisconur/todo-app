{"ast":null,"code":"var _jsxFileName = \"/home/cemal-pro/Documents/Repos/todo-app/frontend/src/components/App/container/ToDoPanel/ToDoContentPanel/container/AddDescription.js\";\nimport React, { Fragment } from 'react';\nimport renameIcon from \"../../../../../../assets/icons/rename-icon.svg\";\nimport { findCurrentListOfToDoInJSON, findCurrentToDoInJSON } from '../../../../utils';\nimport '../view/ToDoContentPanelView.scss';\nexport default class AddDescription extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.renderDescriptionField = () => {\n      if (this.props.selectedToDo === undefined) return;\n\n      if (this.props.selectedToDo.toDoStatus.isCompleted) {\n        return React.createElement(\"textarea\", {\n          className: \"todo-description-field\",\n          rows: \"3\",\n          cols: \"50\",\n          disabled: true,\n          ref: this.userInput,\n          value: this.readDescriptionFromJSON(),\n          name: \"description\",\n          placeholder: \"Add description...\",\n          onChange: () => this.handleChange(),\n          \"data-autoresize\": true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 30\n          },\n          __self: this\n        });\n      } else {\n        return React.createElement(\"textarea\", {\n          className: \"todo-description-field\",\n          rows: \"3\",\n          cols: \"50\",\n          ref: this.userInput,\n          value: this.readDescriptionFromJSON(),\n          name: \"description\",\n          placeholder: \"Add description...\",\n          onChange: () => this.handleChange(),\n          \"data-autoresize\": true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 38\n          },\n          __self: this\n        });\n      }\n    };\n\n    this.handleChange = () => {\n      this.autoResizeTextArea();\n      this.updateDescriptionInJSON(this.props.selectedList, this.props.selectedToDo);\n    };\n\n    this.autoResizeTextArea = () => {\n      document.querySelectorAll('[data-autoresize]').forEach(function (element) {\n        element.style.boxSizing = 'border-box';\n        var offset = element.offsetHeight - element.clientHeight;\n        document.addEventListener('input', function (event) {\n          event.target.style.height = 'auto';\n          event.target.style.height = event.target.scrollHeight + offset + 'px';\n        });\n        element.removeAttribute('data-autoresize');\n      });\n    };\n\n    this.updateDescriptionInJSON = (list, toDo) => {\n      const currentList = findCurrentListOfToDoInJSON(this.props.selectedToDo.listID);\n      const currentToDo = findCurrentToDoInJSON(currentList, toDo);\n      currentToDo.toDoDetails.toDoDescription = this.userInput.current.value;\n      this.props.updateSelectedToDo(currentToDo);\n    };\n\n    this.readDescriptionFromJSON = () => {\n      const currentList = findCurrentListOfToDoInJSON(this.props.selectedToDo.listID);\n      const currentToDo = findCurrentToDoInJSON(currentList, this.props.selectedToDo);\n      if (currentToDo === undefined) return;\n      return currentToDo.toDoDetails.toDoDescription;\n    };\n\n    this.userInput = React.createRef();\n  }\n\n  render() {\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"todo-icon-wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      className: \"rename-icon\",\n      src: renameIcon,\n      alt: \"rename-icon\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    })), this.renderDescriptionField());\n  }\n\n}","map":{"version":3,"sources":["/home/cemal-pro/Documents/Repos/todo-app/frontend/src/components/App/container/ToDoPanel/ToDoContentPanel/container/AddDescription.js"],"names":["React","Fragment","findCurrentListOfToDoInJSON","findCurrentToDoInJSON","AddDescription","Component","constructor","props","renderDescriptionField","selectedToDo","undefined","toDoStatus","isCompleted","userInput","readDescriptionFromJSON","handleChange","autoResizeTextArea","updateDescriptionInJSON","selectedList","document","querySelectorAll","forEach","element","style","boxSizing","offset","offsetHeight","clientHeight","addEventListener","event","target","height","scrollHeight","removeAttribute","list","toDo","currentList","listID","currentToDo","toDoDetails","toDoDescription","current","value","updateSelectedToDo","createRef","render","renameIcon"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAIA,SAASC,2BAAT,EAAsCC,qBAAtC,QAAmE,mBAAnE;AAEA,OAAO,mCAAP;AAEA,eAAe,MAAMC,cAAN,SAA6BJ,KAAK,CAACK,SAAnC,CAA6C;AAC1DC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAgBlBC,sBAhBkB,GAgBO,MAAM;AAC9B,UAAI,KAAKD,KAAL,CAAWE,YAAX,KAA4BC,SAAhC,EAA2C;;AAE3C,UAAI,KAAKH,KAAL,CAAWE,YAAX,CAAwBE,UAAxB,CAAmCC,WAAvC,EAAoD;AAClD,eAAO;AAAU,UAAA,SAAS,EAAC,wBAApB;AAA6C,UAAA,IAAI,EAAC,GAAlD;AAAsD,UAAA,IAAI,EAAC,IAA3D;AACD,UAAA,QAAQ,MADP;AAED,UAAA,GAAG,EAAG,KAAKC,SAFV;AAGD,UAAA,KAAK,EAAG,KAAKC,uBAAL,EAHP;AAID,UAAA,IAAI,EAAC,aAJJ;AAIkB,UAAA,WAAW,EAAC,oBAJ9B;AAKD,UAAA,QAAQ,EAAK,MAAM,KAAKC,YAAL,EALlB;AAMD,iCANC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAOD,OARD,MAQO;AACP,eAAO;AAAU,UAAA,SAAS,EAAC,wBAApB;AAA6C,UAAA,IAAI,EAAC,GAAlD;AAAsD,UAAA,IAAI,EAAC,IAA3D;AACC,UAAA,GAAG,EAAG,KAAKF,SADZ;AAEC,UAAA,KAAK,EAAG,KAAKC,uBAAL,EAFT;AAGC,UAAA,IAAI,EAAC,aAHN;AAGoB,UAAA,WAAW,EAAC,oBAHhC;AAIC,UAAA,QAAQ,EAAK,MAAM,KAAKC,YAAL,EAJpB;AAKC,iCALD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAMC;AACD,KAnCiB;;AAAA,SAqClBA,YArCkB,GAqCH,MAAM;AACnB,WAAKC,kBAAL;AACA,WAAKC,uBAAL,CAA8B,KAAKV,KAAL,CAAWW,YAAzC,EAAuD,KAAKX,KAAL,CAAWE,YAAlE;AAEA,KAzCgB;;AAAA,SA2CjBO,kBA3CiB,GA2CI,MAAM;AACzBG,MAAAA,QAAQ,CAACC,gBAAT,CAA0B,mBAA1B,EAA+CC,OAA/C,CAAuD,UAAUC,OAAV,EAAmB;AACtEA,QAAAA,OAAO,CAACC,KAAR,CAAcC,SAAd,GAA0B,YAA1B;AACA,YAAIC,MAAM,GAAGH,OAAO,CAACI,YAAR,GAAuBJ,OAAO,CAACK,YAA5C;AACAR,QAAAA,QAAQ,CAACS,gBAAT,CAA0B,OAA1B,EAAmC,UAAUC,KAAV,EAAiB;AAClDA,UAAAA,KAAK,CAACC,MAAN,CAAaP,KAAb,CAAmBQ,MAAnB,GAA4B,MAA5B;AACAF,UAAAA,KAAK,CAACC,MAAN,CAAaP,KAAb,CAAmBQ,MAAnB,GAA4BF,KAAK,CAACC,MAAN,CAAaE,YAAb,GAA4BP,MAA5B,GAAqC,IAAjE;AACD,SAHD;AAIAH,QAAAA,OAAO,CAACW,eAAR,CAAwB,iBAAxB;AACD,OARH;AASA,KArDe;;AAAA,SAuDjBhB,uBAvDiB,GAuDS,CAACiB,IAAD,EAAOC,IAAP,KAAgB;AACxC,YAAMC,WAAW,GAAGlC,2BAA2B,CAAC,KAAKK,KAAL,CAAWE,YAAX,CAAwB4B,MAAzB,CAA/C;AACA,YAAMC,WAAW,GAAGnC,qBAAqB,CAACiC,WAAD,EAAcD,IAAd,CAAzC;AAEAG,MAAAA,WAAW,CAACC,WAAZ,CAAwBC,eAAxB,GAA0C,KAAK3B,SAAL,CAAe4B,OAAf,CAAuBC,KAAjE;AACA,WAAKnC,KAAL,CAAWoC,kBAAX,CAA8BL,WAA9B;AACD,KA7DgB;;AAAA,SA+DjBxB,uBA/DiB,GA+DS,MAAM;AAC9B,YAAMsB,WAAW,GAAGlC,2BAA2B,CAAC,KAAKK,KAAL,CAAWE,YAAX,CAAwB4B,MAAzB,CAA/C;AACA,YAAMC,WAAW,GAAGnC,qBAAqB,CAACiC,WAAD,EAAc,KAAK7B,KAAL,CAAWE,YAAzB,CAAzC;AAEA,UAAI6B,WAAW,KAAK5B,SAApB,EAA+B;AAE/B,aAAO4B,WAAW,CAACC,WAAZ,CAAwBC,eAA/B;AACD,KAtEgB;;AAEjB,SAAK3B,SAAL,GAAiBb,KAAK,CAAC4C,SAAN,EAAjB;AACD;;AAEAC,EAAAA,MAAM,GAAG;AACN,WACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAM,MAAA,SAAS,EAAC,mBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAC,aAAf;AAA6B,MAAA,GAAG,EAAEC,UAAlC;AAA8C,MAAA,GAAG,EAAC,aAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ,EAIM,KAAKtC,sBAAL,EAJN,CADF;AAQF;;AAfwD","sourcesContent":["import React, { Fragment } from 'react';\n\nimport renameIcon from '../../../../../../assets/icons/rename-icon.svg';\n\nimport { findCurrentListOfToDoInJSON, findCurrentToDoInJSON } from '../../../../utils';\n\nimport '../view/ToDoContentPanelView.scss';\n\nexport default class AddDescription extends React.Component {\n  constructor(props) {\n    super(props); \n    this.userInput = React.createRef();\n  }\n\n   render() {\n      return (\n        <Fragment>\n            <span className=\"todo-icon-wrapper\">\n                <img className=\"rename-icon\" src={renameIcon} alt=\"rename-icon\"></img>\n            </span>\n            { this.renderDescriptionField() }\n        </Fragment>\n      );\n   }\n\n   renderDescriptionField = () => {\n    if (this.props.selectedToDo === undefined) return;\n\n    if (this.props.selectedToDo.toDoStatus.isCompleted) {\n      return <textarea className=\"todo-description-field\" rows='3' cols='50' \n            disabled\n            ref= {this.userInput}\n            value= {this.readDescriptionFromJSON()}\n            name='description' placeholder='Add description...' \n            onChange = { () => this.handleChange() }\n            data-autoresize />\n    } else {\n    return <textarea className=\"todo-description-field\" rows='3' cols='50' \n            ref= {this.userInput}\n            value= {this.readDescriptionFromJSON()}\n            name='description' placeholder='Add description...' \n            onChange = { () => this.handleChange() }\n            data-autoresize />\n    }\n   }\n\n   handleChange = () => { \n     this.autoResizeTextArea();\n     this.updateDescriptionInJSON (this.props.selectedList, this.props.selectedToDo);\n     \n    }\n\n    autoResizeTextArea = () => {\n      document.querySelectorAll('[data-autoresize]').forEach(function (element) {\n          element.style.boxSizing = 'border-box';\n          var offset = element.offsetHeight - element.clientHeight;\n          document.addEventListener('input', function (event) {\n            event.target.style.height = 'auto';\n            event.target.style.height = event.target.scrollHeight + offset + 'px';\n          });\n          element.removeAttribute('data-autoresize');\n        });\n     }\n\n    updateDescriptionInJSON = (list, toDo) => {\n      const currentList = findCurrentListOfToDoInJSON(this.props.selectedToDo.listID);\n      const currentToDo = findCurrentToDoInJSON(currentList, toDo);\n\n      currentToDo.toDoDetails.toDoDescription = this.userInput.current.value; \n      this.props.updateSelectedToDo(currentToDo); \n    }\n\n    readDescriptionFromJSON = () => {\n      const currentList = findCurrentListOfToDoInJSON(this.props.selectedToDo.listID);\n      const currentToDo = findCurrentToDoInJSON(currentList, this.props.selectedToDo);\n  \n      if (currentToDo === undefined) return;\n  \n      return currentToDo.toDoDetails.toDoDescription;\n    }\n}"]},"metadata":{},"sourceType":"module"}