{"ast":null,"code":"var _jsxFileName = \"/home/cemal-pro/Documents/Repos/todo-app/frontend/src/components/App/container/ToDoPanel/container/SearchPanel.js\";\nimport React, { Fragment } from 'react';\nimport { Button } from 'react-bootstrap';\nimport ToDoItem from '../container/ToDoItem';\nimport searchIcon from \"../../../../../assets/background-images/search-big-icon.svg\";\nimport appJson from '../../../../../app';\nimport { groupByListID, orderToDoSet, getAllToDos } from '../../../utils';\nimport '../view/ToDoPanelView.scss';\n\nconst shortid = require('shortid');\n\nexport default class SearchPanel extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.setToDos = () => {\n      this.setState({\n        toDos: getAllToDos()\n      }, () => {\n        this.searchInSet(this.state.toDos);\n      });\n    };\n\n    this.searchInSet = todos => {\n      const foundedToDos = this.search(todos);\n      const toDoSet = groupByListID(foundedToDos);\n      const orderedToDoSet = orderToDoSet(toDoSet);\n      this.setState({\n        toDoSet: orderedToDoSet\n      });\n    };\n\n    this.search = list => {\n      if (list === undefined) return;\n      const searchedWord = this.props.searchedWord;\n      return list.filter(toDoItem => toDoItem.toDoName.toLowerCase().includes(searchedWord.toLowerCase()));\n    };\n\n    this.updateToDo = toDoItem => {\n      this.props.updateToDo(toDoItem);\n    };\n\n    this.updateListItems = updatedListItems => {\n      this.setState({\n        listItems: updatedListItems\n      }, () => {\n        this.setToDos();\n      });\n    };\n\n    this.renderSearchPanel = toDoSet => {\n      if (toDoSet === undefined) return;\n\n      if (toDoSet.length === 0) {\n        return this.renderNotFoundPanel();\n      } else {\n        return React.createElement(\"div\", {\n          className: \"all-items-container\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73\n          },\n          __self: this\n        }, \" \", this.renderToDoSet(), \" \");\n      }\n    };\n\n    this.renderNotFoundPanel = () => {\n      return React.createElement(\"div\", {\n        className: \"not-found-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        className: \"search-img\",\n        src: searchIcon,\n        alt: \"search-img\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }), React.createElement(\"h2\", {\n        className: \"searched-word-text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, \" \\\"\", this.props.searchedWord, \"\\\"\"), \" is not found\"));\n    };\n\n    this.renderToDoSet = () => {\n      const toDoSet = this.state.toDoSet;\n\n      if (toDoSet !== undefined) {\n        return toDoSet.map(toDoGroup => {\n          const listName = toDoGroup[0].listName;\n          return React.createElement(\"div\", {\n            className: \"todo-items-container\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 89\n            },\n            __self: this\n          }, React.createElement(Button, {\n            variant: \"info\",\n            className: \"list-group-tag\",\n            onClick: () => this.renderSelectedList(listName),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 90\n            },\n            __self: this\n          }, listName), this.renderToDoGroupItem(toDoGroup));\n        });\n      }\n    };\n\n    this.renderToDoGroupItem = toDoGroup => {\n      const listItems = appJson.listItems;\n      console.log(listItems);\n      const currentIndex = listItems.findIndex(listItem => listItem.listID === toDoGroup[0].listID);\n      const selectedList = listItems[currentIndex];\n      return toDoGroup.map(toDoItem => {\n        return React.createElement(Fragment, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 106\n          },\n          __self: this\n        }, React.createElement(ToDoItem, {\n          selectedList: selectedList,\n          toDoItem: toDoItem,\n          key: shortid.generate(),\n          isSearchRendering: true,\n          updateThisSearchPanel: this.updateListItems,\n          updateToDo: this.updateToDo,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 107\n          },\n          __self: this\n        }));\n      });\n    };\n\n    this.renderSelectedList = listName => {\n      const listItems = appJson.listItems;\n      const currentIndex = listItems.findIndex(listItem => listItem.listName === listName);\n      const selectedList = listItems[currentIndex];\n      this.props.updateSelectedList(selectedList);\n    };\n\n    this.state = {\n      toDos: [],\n      toDoSet: []\n    };\n  }\n\n  componentWillMount() {\n    this.setToDos();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.searchedWord !== prevProps.searchedWord) this.setToDos();\n  }\n\n  render() {\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, \" \", this.renderSearchPanel(this.state.toDoSet), \" \");\n  }\n\n}","map":{"version":3,"sources":["/home/cemal-pro/Documents/Repos/todo-app/frontend/src/components/App/container/ToDoPanel/container/SearchPanel.js"],"names":["React","Fragment","Button","ToDoItem","appJson","groupByListID","orderToDoSet","getAllToDos","shortid","require","SearchPanel","Component","constructor","props","setToDos","setState","toDos","searchInSet","state","todos","foundedToDos","search","toDoSet","orderedToDoSet","list","undefined","searchedWord","filter","toDoItem","toDoName","toLowerCase","includes","updateToDo","updateListItems","updatedListItems","listItems","renderSearchPanel","length","renderNotFoundPanel","renderToDoSet","searchIcon","map","toDoGroup","listName","renderSelectedList","renderToDoGroupItem","console","log","currentIndex","findIndex","listItem","listID","selectedList","generate","updateSelectedList","componentWillMount","componentDidUpdate","prevProps","render"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react';\nimport { Button } from 'react-bootstrap';\n\nimport ToDoItem from '../container/ToDoItem';\nimport searchIcon from '../../../../../assets/background-images/search-big-icon.svg';\n\nimport appJson from '../../../../../app';\n\nimport { groupByListID, orderToDoSet, getAllToDos } from '../../../utils';\n\nimport '../view/ToDoPanelView.scss';\n\nconst shortid = require('shortid');\n\nexport default class SearchPanel extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      toDos: [],\n      toDoSet: []\n    };\n  }\n\n  componentWillMount() { this.setToDos() }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.searchedWord !== prevProps.searchedWord) this.setToDos();\n  }\n  \n  setToDos = () => { \n    this.setState({ toDos: getAllToDos() }, () => {\n      this.searchInSet(this.state.toDos);\n    })\n  }\n\n  searchInSet = (todos) => { \n    const foundedToDos = this.search(todos);\n    const toDoSet = groupByListID(foundedToDos);\n    const orderedToDoSet = orderToDoSet(toDoSet);\n\n    this.setState({ toDoSet: orderedToDoSet });\n  }\n\n  search = (list) => {\n    if (list === undefined) return;\n    const searchedWord = this.props.searchedWord;\n    return list.filter(toDoItem => toDoItem.toDoName.toLowerCase().includes(searchedWord.toLowerCase()));\n  } \n\n  updateToDo = (toDoItem) => {\n    this.props.updateToDo(toDoItem);\n  }\n\n  updateListItems = (updatedListItems) => {\n    this.setState({ listItems: updatedListItems }, () => {\n      this.setToDos();\n    });\n  }\n\n  render() { \n    return (\n      <Fragment> { this.renderSearchPanel(this.state.toDoSet) } </Fragment> \n    );\n  }\n\n  renderSearchPanel = (toDoSet) => {\n    if (toDoSet === undefined) return;\n\n    if (toDoSet.length === 0) {\n      return this.renderNotFoundPanel()\n    } else {\n      return <div className=\"all-items-container\"> { this.renderToDoSet() } </div>\n    }\n  }\n\n  renderNotFoundPanel = () => {\n    return <div className=\"not-found-container\">\n             <img className=\"search-img\" src={searchIcon} alt=\"search-img\"></img>\n             <h2 className=\"searched-word-text\"><strong> \"{this.props.searchedWord}\"</strong> is not found</h2>\n           </div>\n  }\n\n  renderToDoSet = () => {\n    const toDoSet = this.state.toDoSet;\n    if (toDoSet !== undefined) {\n        return toDoSet.map((toDoGroup => {\n          const listName = toDoGroup[0].listName;\n          return <div className=\"todo-items-container\">\n                   <Button variant=\"info\" className=\"list-group-tag\" onClick={() =>this.renderSelectedList(listName)}>\n                     {listName} \n                   </Button>\n                   {this.renderToDoGroupItem(toDoGroup)}\n                 </div>\n        }))\n    }\n  }\n\n  renderToDoGroupItem = (toDoGroup) => {\n    const listItems = appJson.listItems;\n    console.log(listItems);\n    const currentIndex = listItems.findIndex(listItem => listItem.listID === toDoGroup[0].listID);\n    const selectedList = listItems[currentIndex];\n    \n    return toDoGroup.map((toDoItem) => {\n      return <Fragment>\n              <ToDoItem selectedList= {selectedList} toDoItem={toDoItem} key={shortid.generate()} isSearchRendering= {true}\n              updateThisSearchPanel= {this.updateListItems} updateToDo= {this.updateToDo} />\n            </Fragment>\n    })\n  }\n\n  renderSelectedList = (listName) => {\n    const listItems = appJson.listItems;\n    const currentIndex = listItems.findIndex(listItem => listItem.listName === listName);\n    const selectedList = listItems[currentIndex];\n    \n    this.props.updateSelectedList(selectedList);\n  }\n} \n"]},"metadata":{},"sourceType":"module"}