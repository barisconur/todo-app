{"ast":null,"code":"var _jsxFileName = \"/home/cemal-pro/Documents/Repos/todo-app/frontend/src/components/App/container/ListPanel/container/CreateItemModal.js\";\nimport React from 'react';\nimport { Modal, InputGroup, FormControl, Button } from 'react-bootstrap';\nimport appJson from '../../../../../app';\nimport { isEmptyString, isEnterKeyPressed } from '../../../utils';\nimport '../view/ListPanelView.scss';\nexport default class CreateItemModal extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleEnterKey = e => {\n      if (isEnterKeyPressed(e)) this.addNewItem();\n    };\n\n    this.setInputComingFromUser = () => {\n      this.setState({\n        input: this.userInput.current.value\n      });\n    };\n\n    this.addNewItem = () => {\n      let input = this.state.input;\n\n      if (isEmptyString(input)) {\n        alert(\"Please enter not an empty text\");\n        return;\n      }\n\n      const folderItems = appJson.folderItems;\n\n      if (this.props.whichModal === 'folder') {\n        if (!this.checkFolderNameIsUnique(folderItems)) return;\n        this.registerNewFolderItem(folderItems);\n      } else {\n        const listItems = appJson.listItems;\n        this.registerNewListItem(listItems);\n      }\n\n      this.clearInput();\n      this.props.closeModal();\n    };\n\n    this.checkFolderNameIsUnique = folderItems => {\n      for (let i = 0; i < folderItems.length; i++) {\n        if (this.state.input === folderItems[i].folderName) {\n          alert(\"You have already added a folder with this name\");\n          return false;\n        }\n      }\n\n      return true;\n    };\n\n    this.registerNewFolderItem = folderItems => {\n      const newFolder = {\n        folderID: this.state.folderID,\n        folderName: this.state.input,\n        listGroup: []\n      };\n      this.setState(prevState => {\n        return {\n          folderID: prevState.folderID + 1\n        };\n      });\n      this.setState(prevState => {\n        return {\n          folderID: prevState.folderID++\n        };\n      });\n      folderItems.push(newFolder);\n    };\n\n    this.registerNewListItem = listItems => {\n      this.setState(prevState => {\n        return {\n          listID: prevState.listID + 1\n        };\n      });\n      const newList = {\n        listID: this.state.listID,\n        listName: this.state.input,\n        toDoItems: [],\n        numberOfIncompletedToDoCount: 0\n      };\n      const newSelectedList = newList;\n      appJson.selectedList = newSelectedList;\n      listItems.push(newSelectedList);\n      this.props.sendSelectedListToAppView(newSelectedList);\n    };\n\n    this.clearInput = () => {\n      this.setState({\n        input: \"\"\n      });\n    };\n\n    this.userInput = React.createRef();\n    this.state = {\n      input: \"\",\n      listID: 4,\n      folderID: 0\n    };\n  }\n\n  render() {\n    return React.createElement(Modal, {\n      className: \"add-list-or-folder-modal\",\n      show: this.props.isModalShown,\n      onHide: this.props.closeModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, React.createElement(Modal.Header, {\n      closeButton: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, React.createElement(Modal.Title, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, \"Create New \", this.props.whichModal)), React.createElement(Modal.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, React.createElement(InputGroup, {\n      className: \"mb-3\",\n      onKeyPress: this.handleEnterKey,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, React.createElement(FormControl, {\n      ref: this.userInput,\n      type: \"text\",\n      maxLength: \"200\",\n      placeholder: this.props.whichModal + \" name\",\n      \"aria-label\": this.props.whichModal + \"-name\",\n      \"aria-describedby\": \"basic-addon2\",\n      onChange: () => this.setInputComingFromUser(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }))), React.createElement(Modal.Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, React.createElement(Button, {\n      className: \"modal-close-btn\",\n      variant: \"secondary\",\n      onClick: this.props.closeModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, \" Close \"), React.createElement(Button, {\n      className: \"modal-register-btn\",\n      variant: \"primary\",\n      onClick: this.addNewItem,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, \" Save \")));\n  }\n\n}","map":{"version":3,"sources":["/home/cemal-pro/Documents/Repos/todo-app/frontend/src/components/App/container/ListPanel/container/CreateItemModal.js"],"names":["React","Modal","InputGroup","FormControl","Button","appJson","isEmptyString","isEnterKeyPressed","CreateItemModal","Component","constructor","props","handleEnterKey","e","addNewItem","setInputComingFromUser","setState","input","userInput","current","value","state","alert","folderItems","whichModal","checkFolderNameIsUnique","registerNewFolderItem","listItems","registerNewListItem","clearInput","closeModal","i","length","folderName","newFolder","folderID","listGroup","prevState","push","listID","newList","listName","toDoItems","numberOfIncompletedToDoCount","newSelectedList","selectedList","sendSelectedListToAppView","createRef","render","isModalShown"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Modal, InputGroup, FormControl, Button } from 'react-bootstrap';\n\nimport appJson from '../../../../../app';\n\nimport { isEmptyString, isEnterKeyPressed } from '../../../utils';\n\nimport '../view/ListPanelView.scss';\n\nexport default class CreateItemModal extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.userInput = React.createRef();\n\n    this.state = {\n      input: \"\",\n      listID: 4,\n      folderID: 0\n    }\n  }\n\n  render() {\n    return (\n      <Modal className=\"add-list-or-folder-modal\" show={this.props.isModalShown} onHide={this.props.closeModal}>\n        <Modal.Header closeButton>\n          <Modal.Title>Create New {this.props.whichModal}</Modal.Title>\n        </Modal.Header>\n\n        <Modal.Body>\n          <InputGroup className=\"mb-3\" onKeyPress={this.handleEnterKey}>\n            <FormControl\n              ref= {this.userInput}\n              type= \"text\"\n              maxLength= \"200\"\n              placeholder= {this.props.whichModal +\" name\"}\n              aria-label={this.props.whichModal +\"-name\"}\n              aria-describedby=\"basic-addon2\"\n              onChange={() => this.setInputComingFromUser()}/>\n          </InputGroup>\n        </Modal.Body>\n      \n        <Modal.Footer>\n          <Button className=\"modal-close-btn\" variant=\"secondary\" onClick={this.props.closeModal}> Close </Button>\n          <Button className=\"modal-register-btn\" variant=\"primary\" onClick={this.addNewItem}> Save </Button>\n        </Modal.Footer>\n      </Modal>\n    );\n  }\n\n  handleEnterKey = (e) => { if (isEnterKeyPressed(e)) this.addNewItem(); } \n\n  setInputComingFromUser = () => { this.setState({ input: this.userInput.current.value }); }\n\n  addNewItem = () => {\n    let input = this.state.input;\n    if (isEmptyString(input)) {\n      alert(\"Please enter not an empty text\");\n      return;\n    }\n    \n    const folderItems = appJson.folderItems;\n\n    if (this.props.whichModal === 'folder') {\n      if (!this.checkFolderNameIsUnique(folderItems)) return;\n      this.registerNewFolderItem(folderItems);  \n    } else {\n      const listItems = appJson.listItems;\n      this.registerNewListItem(listItems);\n    }\n    \n    this.clearInput();\n    this.props.closeModal();\n  }\n  \n  checkFolderNameIsUnique = (folderItems) => {\n    for (let i = 0; i < folderItems.length; i++) {\n      if (this.state.input === folderItems[i].folderName) {\n        alert(\"You have already added a folder with this name\");\n        return false;\n      }\n    }\n    return true;\n  }\n\n  registerNewFolderItem = (folderItems) => {\n    const newFolder = { folderID: this.state.folderID,\n                       folderName: this.state.input,\n                       listGroup: []\n                      };\n      this.setState(prevState => {\n       return {folderID: prevState.folderID + 1}\n    })\n    this.setState(prevState => {return { folderID: prevState.folderID++ }});\n    folderItems.push(newFolder);\n  }\n\n  registerNewListItem = (listItems) => {\n    this.setState(prevState => {return { listID: prevState.listID + 1}});\n    const newList = { listID: this.state.listID,\n                      listName: this.state.input,\n                      toDoItems: [],\n                      numberOfIncompletedToDoCount: 0\n                    };\n    const newSelectedList = newList;\n\n    appJson.selectedList = newSelectedList;\n    listItems.push(newSelectedList);\n    this.props.sendSelectedListToAppView(newSelectedList);\n  }\n\n  clearInput = () => { this.setState({ input: \"\" });\n  }\n}"]},"metadata":{},"sourceType":"module"}