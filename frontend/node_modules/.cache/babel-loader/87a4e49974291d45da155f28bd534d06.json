{"ast":null,"code":"var _jsxFileName = \"/home/cemal-pro/Documents/Repos/todo-app/frontend/src/components/App/container/ListPanel/container/ListItem.js\";\nimport React, { Fragment } from 'react';\nimport { BrowserRouter as Router, NavLink } from 'react-router-dom';\nimport { MenuProvider, Menu, Item } from 'react-contexify';\nimport 'react-contexify/dist/ReactContexify.min.css';\nimport ListModificationModal from './ListModificationModal';\nimport inboxIcon from \"../../../../../assets/icons/inbox-icon.svg\";\nimport starredIcon from \"../../../../../assets/icons/star-icon.svg\";\nimport todayIcon from \"../../../../../assets/icons/today-icon.svg\";\nimport weekIcon from \"../../../../../assets/icons/this-week-icon.svg\";\nimport listIcon from \"../../../../../assets/icons/list-icon.svg\";\nimport { findCurrentListInJSON, findCurrentListIndex } from '../../../utils';\nimport appJson from '../../../../../app';\nimport '../view/ListPanelView.scss';\nexport default class ListItem extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.sendSelectedListToAppView = selectedList => {\n      this.props.sendSelectedToView(selectedList);\n    };\n\n    this.renderList = () => {\n      const listItem = this.props.listItem;\n      const listName = listItem.listName;\n      const listID = listItem.listID;\n\n      if (listID <= 3) {\n        return React.createElement(\"div\", {\n          className: \"list-item-wrapper\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47\n          },\n          __self: this\n        }, React.createElement(NavLink, {\n          className: \"list-link\",\n          to: '/lists/' + listName,\n          onClick: this.setSelectedList,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49\n          },\n          __self: this\n        }, this.selectIconSource(listID), React.createElement(\"h2\", {\n          className: \"list-text\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 51\n          },\n          __self: this\n        }, listName)));\n      } else {\n        return React.createElement(Fragment, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 56\n          },\n          __self: this\n        }, React.createElement(MenuProvider, {\n          id: listID,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 57\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"list-item-wrapper\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58\n          },\n          __self: this\n        }, React.createElement(NavLink, {\n          className: \"list-link\",\n          to: '/lists/' + listID,\n          onClick: this.setSelectedList,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60\n          },\n          __self: this\n        }, React.createElement(\"img\", {\n          className: \"list-icon\",\n          src: listIcon,\n          alt: \"list-icon\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 61\n          },\n          __self: this\n        }), React.createElement(\"h2\", {\n          className: \"list-text\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62\n          },\n          __self: this\n        }, listName)), this.renderCountTexts())), this.renderListMenu(listID), React.createElement(ListModificationModal, {\n          listItem: listItem,\n          isRenameModalOpen: this.state.isRenameModalOpen,\n          sendModalUpdate: this.sendSelectedListToAppView,\n          updateList: this.props.updateList,\n          closeModal: this.closeModalBox,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70\n          },\n          __self: this\n        }));\n      }\n    };\n\n    this.setSelectedList = () => {\n      this.props.sendSelectedToView(this.props.listItem);\n    };\n\n    this.selectIconSource = listID => {\n      switch (listID) {\n        case 0:\n          return React.createElement(\"img\", {\n            className: \"inbox-icon\",\n            src: inboxIcon,\n            alt: \"inbox-icon\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 80\n            },\n            __self: this\n          });\n\n        case 1:\n          return React.createElement(\"img\", {\n            className: \"starred-icon\",\n            src: starredIcon,\n            alt: \"starred-icon\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 81\n            },\n            __self: this\n          });\n\n        case 2:\n          return React.createElement(\"img\", {\n            className: \"today-icon\",\n            src: todayIcon,\n            alt: \"today-icon\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 82\n            },\n            __self: this\n          });\n\n        case 3:\n          return React.createElement(\"img\", {\n            className: \"week-icon\",\n            src: weekIcon,\n            alt: \"week-icon\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 83\n            },\n            __self: this\n          });\n\n        default:\n          return null;\n      }\n    };\n\n    this.renderCountTexts = () => {\n      const currentList = findCurrentListInJSON(this.props.listItem);\n      let incompletedToDoCount = 0;\n      let overDueToDoCount = 0;\n      currentList.toDoItems.forEach(toDoItem => {\n        if (!toDoItem.toDoStatus.isCompleted) incompletedToDoCount++;\n      });\n      currentList.numberOfIncompletedToDoCount = incompletedToDoCount;\n      return React.createElement(\"span\", {\n        className: \"list-counts-wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, this.showCount(overDueToDoCount), this.showCount(incompletedToDoCount));\n    };\n\n    this.showCount = count => {\n      if (count !== 0) return React.createElement(\"h2\", {\n        className: \"todo-count-text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, count);\n    };\n\n    this.renderListMenu = uniqueID => {\n      return React.createElement(Menu, {\n        id: uniqueID,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, React.createElement(Item, {\n        onClick: this.openModalBox,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, \"Rename list\"), React.createElement(Item, {\n        onClick: this.removeList,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, \"Remove list\"));\n    };\n\n    this.openModalBox = () => {\n      this.setState({\n        isRenameModalOpen: true\n      });\n    };\n\n    this.closeModalBox = () => {\n      this.setState({\n        isRenameModalOpen: false\n      });\n    };\n\n    this.removeList = () => {\n      const answer = window.confirm(\"Are you sure remove this list?\");\n      if (!answer) return;\n      const listItems = appJson.listItems;\n      const currentList = this.props.listItem;\n      const index = findCurrentListIndex(currentList);\n      console.log(index);\n      if (index !== undefined) listItems.splice(index, 1);\n\n      if (currentList.listID === appJson.selectedList.listID) {\n        appJson.selectedList = listItems[0];\n        this.props.sendSelectedToView(listItems[0]);\n      }\n\n      this.props.updateList();\n    };\n\n    this.state = {\n      isRenameModalOpen: false\n    };\n  }\n\n  render() {\n    return React.createElement(Router, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, this.renderList()));\n  }\n\n}","map":{"version":3,"sources":["/home/cemal-pro/Documents/Repos/todo-app/frontend/src/components/App/container/ListPanel/container/ListItem.js"],"names":["React","Fragment","BrowserRouter","Router","NavLink","MenuProvider","Menu","Item","ListModificationModal","findCurrentListInJSON","findCurrentListIndex","appJson","ListItem","Component","constructor","props","sendSelectedListToAppView","selectedList","sendSelectedToView","renderList","listItem","listName","listID","setSelectedList","selectIconSource","listIcon","renderCountTexts","renderListMenu","state","isRenameModalOpen","updateList","closeModalBox","inboxIcon","starredIcon","todayIcon","weekIcon","currentList","incompletedToDoCount","overDueToDoCount","toDoItems","forEach","toDoItem","toDoStatus","isCompleted","numberOfIncompletedToDoCount","showCount","count","uniqueID","openModalBox","removeList","setState","answer","window","confirm","listItems","index","console","log","undefined","splice","render"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react';\nimport { BrowserRouter as Router, NavLink} from 'react-router-dom';\nimport { MenuProvider, Menu, Item } from 'react-contexify';\nimport 'react-contexify/dist/ReactContexify.min.css';\n\nimport ListModificationModal from './ListModificationModal';\n\nimport inboxIcon from '../../../../../assets/icons/inbox-icon.svg';\nimport starredIcon from '../../../../../assets/icons/star-icon.svg';\nimport todayIcon from '../../../../../assets/icons/today-icon.svg';\nimport weekIcon from '../../../../../assets/icons/this-week-icon.svg';\nimport listIcon from '../../../../../assets/icons/list-icon.svg';\n\nimport { findCurrentListInJSON, findCurrentListIndex } from '../../../utils';\n\nimport appJson from '../../../../../app';\n\nimport '../view/ListPanelView.scss';\n\nexport default class ListItem extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isRenameModalOpen: false\n    };\n  }\n\n  sendSelectedListToAppView = (selectedList) => { this.props.sendSelectedToView(selectedList); }\n\n  render() {\n    return (\n      <Router>\n        <Fragment>\n          { this.renderList() }\n        </Fragment>\n      </Router>\n    );\n  }\n\n  renderList = () => {\n    const listItem = this.props.listItem;\n    const listName = listItem.listName;\n    const listID = listItem.listID;    \n\n    if (listID <= 3) {\n      return <div className=\"list-item-wrapper\">\n\n                <NavLink className=\"list-link\" to={'/lists/' + listName} onClick= {this.setSelectedList}>\n                { this.selectIconSource(listID) }\n                <h2 className=\"list-text\">{listName}</h2>\n                </NavLink>\n\n             </div>\n    } else {\n      return <Fragment>\n              <MenuProvider id= {listID}>\n                <div className=\"list-item-wrapper\">\n\n                  <NavLink className=\"list-link\" to={'/lists/' + listID} onClick={this.setSelectedList}>\n                    <img className=\"list-icon\" src={listIcon} alt=\"list-icon\"></img>\n                    <h2 className=\"list-text\">{listName}</h2>\n                  </NavLink>\n                  { this.renderCountTexts() }\n                </div>\n              </MenuProvider>\n\n              { this.renderListMenu(listID) }\n\n              <ListModificationModal listItem={ listItem } isRenameModalOpen={this.state.isRenameModalOpen} \n              sendModalUpdate={this.sendSelectedListToAppView} updateList={this.props.updateList} closeModal={this.closeModalBox}/>\n            </Fragment>\n    }\n  }\n  \n  setSelectedList = () => { this.props.sendSelectedToView(this.props.listItem) }\n\n  selectIconSource = (listID) => {\n    switch(listID) {\n      case 0: return <img className=\"inbox-icon\" src={inboxIcon} alt=\"inbox-icon\"></img>\n      case 1: return <img className=\"starred-icon\" src={starredIcon} alt=\"starred-icon\"></img>\n      case 2: return <img className=\"today-icon\" src={todayIcon} alt=\"today-icon\"></img>\n      case 3: return <img className=\"week-icon\" src={weekIcon} alt=\"week-icon\"></img>\n      default: return null;\n    }\n  }\n\n  renderCountTexts = () => {\n    const currentList = findCurrentListInJSON(this.props.listItem);\n\n    let incompletedToDoCount = 0;\n    let overDueToDoCount = 0;\n\n    currentList.toDoItems.forEach(toDoItem => {\n      if (!toDoItem.toDoStatus.isCompleted) incompletedToDoCount++;\n    });\n    currentList.numberOfIncompletedToDoCount = incompletedToDoCount;\n    \n    return <span className=\"list-counts-wrapper\">\n              { this.showCount(overDueToDoCount) } \n              { this.showCount(incompletedToDoCount) }\n          </span>\n  }\n\n  showCount = (count) => { if (count !== 0) return <h2 className=\"todo-count-text\">{count}</h2> }\n\n  renderListMenu = (uniqueID) => {\n    return <Menu id= {uniqueID}>\n            <Item onClick= {this.openModalBox}>Rename list</Item>\n            <Item onClick= {this.removeList}>Remove list</Item>\n           </Menu>\n  }\n \n  openModalBox = () => {this.setState({ isRenameModalOpen: true })}\n\n  closeModalBox = () => {this.setState({ isRenameModalOpen: false })} \n\n  removeList = () => {\n    const answer = window.confirm(\"Are you sure remove this list?\");\n    if (!answer) return;\n    \n    const listItems = appJson.listItems;\n    const currentList = this.props.listItem;\n    const index = findCurrentListIndex(currentList);\n\n    console.log(index);\n    if (index !== undefined) listItems.splice(index,1);\n\n    if (currentList.listID === appJson.selectedList.listID) {\n      appJson.selectedList = listItems[0]; \n      this.props.sendSelectedToView(listItems[0]);\n    }\n    this.props.updateList();\n  }\n}"]},"metadata":{},"sourceType":"module"}