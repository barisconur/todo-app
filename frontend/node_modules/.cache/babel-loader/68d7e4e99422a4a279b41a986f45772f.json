{"ast":null,"code":"var _jsxFileName = \"/home/cemal-pro/Documents/Repos/todo-app/frontend/src/components/App/container/ToDoPanel/ToDoContentPanel/container/AddSubTask.js\";\nimport React, { Fragment } from 'react';\nimport { InputGroup, FormControl } from 'react-bootstrap';\nimport plusIcon from \"../../../../../../assets/icons/plus-icon.svg\";\nimport { isEnterKeyPressed } from '../../../../utils';\nimport '../view/ToDoContentPanelView.scss';\n\nconst shortid = require('shortid');\n\nexport default class AddSubTask extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.renderAddSubtaskField = () => {\n      if (this.props.selectedToDo === undefined) return;\n\n      if (!this.props.selectedToDo.toDoStatus.isCompleted) {\n        return React.createElement(InputGroup, {\n          className: \"add-subtask-field\",\n          onKeyPress: this.handleEnterKeyEvent,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 38\n          },\n          __self: this\n        }, React.createElement(FormControl, {\n          className: \"subtask-field\",\n          ref: this.userInput,\n          placeholder: \"Add a subtask\",\n          \"aria-label\": \"Subtask-name\",\n          \"aria-describedby\": \"basic-addon2\",\n          onChange: () => this.handleChange(),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 39\n          },\n          __self: this\n        }));\n      } else {\n        return React.createElement(InputGroup, {\n          className: \"add-subtask-field\",\n          onKeyPress: this.handleEnterKeyEvent,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47\n          },\n          __self: this\n        }, React.createElement(FormControl, {\n          className: \"subtask-field\",\n          disabled: true,\n          ref: this.userInput,\n          placeholder: \"Add a subtask\",\n          \"aria-label\": \"Subtask-name\",\n          \"aria-describedby\": \"basic-addon2\",\n          onChange: () => this.handleChange(),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48\n          },\n          __self: this\n        }));\n      }\n    };\n\n    this.handleEnterKeyEvent = event => {\n      if (isEnterKeyPressed(event)) this.addSubTask();\n    };\n\n    this.addSubTask = () => {\n      if (this.isNotEmpty(this.state.subTaskName)) {\n        alert(\"Please enter not an empty text\");\n        return;\n      }\n\n      const selected = this.props.selectedToDo;\n      const newSubTask = {\n        subTaskID: shortid.generate(),\n        subTaskName: this.state.subTaskName,\n        isCompleted: false\n      };\n      this.clearInput();\n      selected.toDoDetails.subTaskList.push(newSubTask);\n      this.props.updateSelectedToDo(selected);\n    };\n\n    this.isNotEmpty = input => input.length === 0 ? true : false;\n\n    this.clearInput = () => {\n      this.userInput.current.value = \"\";\n      this.userInput.current.placeholder = \"Add a subtask\";\n    };\n\n    this.handleChange = () => {\n      this.setState({\n        subTaskName: this.userInput.current.value\n      });\n    };\n\n    this.userInput = React.createRef();\n    this.state = {\n      subTaskName: \"\"\n    };\n  }\n\n  render() {\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"plus-icon-wrapper\",\n      onClick: this.addSubTask,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      className: \"plus-icon\",\n      src: plusIcon,\n      alt: \"plus-icon\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    })), this.renderAddSubtaskField());\n  }\n\n}","map":{"version":3,"sources":["/home/cemal-pro/Documents/Repos/todo-app/frontend/src/components/App/container/ToDoPanel/ToDoContentPanel/container/AddSubTask.js"],"names":["React","Fragment","InputGroup","FormControl","isEnterKeyPressed","shortid","require","AddSubTask","Component","constructor","props","renderAddSubtaskField","selectedToDo","undefined","toDoStatus","isCompleted","handleEnterKeyEvent","userInput","handleChange","event","addSubTask","isNotEmpty","state","subTaskName","alert","selected","newSubTask","subTaskID","generate","clearInput","toDoDetails","subTaskList","push","updateSelectedToDo","input","length","current","value","placeholder","setState","createRef","render","plusIcon"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react';\nimport { InputGroup, FormControl } from 'react-bootstrap';\n\nimport plusIcon from '../../../../../../assets/icons/plus-icon.svg';\n\nimport { isEnterKeyPressed } from '../../../../utils';\n\nimport '../view/ToDoContentPanelView.scss';\n\nconst shortid = require('shortid');\n\nexport default class AddSubTask extends React.Component {\n  constructor(props) {\n    super(props); \n\n    this.userInput = React.createRef();\n    this.state = {\n      subTaskName: \"\"\n    }\n  }\n\n   render() {\n      return (\n        <Fragment>\n            <span className=\"plus-icon-wrapper\" onClick={this.addSubTask}>\n                <img className=\"plus-icon\" src={plusIcon} alt=\"plus-icon\"></img>\n            </span>\n\n            { this.renderAddSubtaskField() }\n        </Fragment>\n      );\n   } \n\n   renderAddSubtaskField = () => {\n    if (this.props.selectedToDo === undefined) return;\n\n    if (!this.props.selectedToDo.toDoStatus.isCompleted) {\n      return <InputGroup className=\"add-subtask-field\" onKeyPress={this.handleEnterKeyEvent}>\n              <FormControl className=\"subtask-field\"\n              ref= {this.userInput}\n              placeholder=\"Add a subtask\"\n              aria-label=\"Subtask-name\"\n              aria-describedby=\"basic-addon2\"\n              onChange={ () => this.handleChange() }/>\n        </InputGroup>\n    } else {\n    return <InputGroup className=\"add-subtask-field\" onKeyPress={this.handleEnterKeyEvent}>\n            <FormControl className=\"subtask-field\"\n            disabled\n            ref= {this.userInput}\n            placeholder=\"Add a subtask\"\n            aria-label=\"Subtask-name\"\n            aria-describedby=\"basic-addon2\"\n            onChange={ () => this.handleChange() }/>\n          </InputGroup>\n    }\n   }\n\n   handleEnterKeyEvent = (event) => { if (isEnterKeyPressed(event)) this.addSubTask() }\n\n   addSubTask = () => {\n    if (this.isNotEmpty(this.state.subTaskName)) {\n      alert(\"Please enter not an empty text\");\n      return;\n    }\n    const selected = this.props.selectedToDo;\n    const newSubTask = { subTaskID: shortid.generate(),\n                         subTaskName: this.state.subTaskName,\n                         isCompleted: false\n                       }\n    this.clearInput();\n\n    selected.toDoDetails.subTaskList.push(newSubTask);\n    this.props.updateSelectedToDo(selected);\n   }\n\n   isNotEmpty = (input) => (input.length === 0) ? true : false;\n\n   clearInput = () => {\n     this.userInput.current.value= \"\";\n     this.userInput.current.placeholder= \"Add a subtask\"; \n  }\n\n   handleChange = () => {\n     this.setState({\n      subTaskName: this.userInput.current.value\n     });\n   }\n\n}"]},"metadata":{},"sourceType":"module"}