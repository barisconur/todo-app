{"ast":null,"code":"var _jsxFileName = \"/home/cemal-pro/Documents/Repos/todo-app/frontend/src/components/App/container/ToDoPanel/container/ToDoItem.js\";\nimport React from 'react';\nimport { BrowserRouter as Router, NavLink } from 'react-router-dom';\nimport StarRatings from 'react-star-ratings';\nimport { MenuProvider, Menu, Item, Separator, Submenu } from 'react-contexify';\nimport checkBoxIcon from \"../../../../../assets/icons/checkbox-icon.svg\";\nimport checkBoxFilled from \"../../../../../assets/icons/checkbox-filled-icon.svg\";\nimport { findCurrentToDoInJSON, findCurrentToDoIndex, findCurrentListInJSON, findCurrentListOfToDoInJSON } from '../../../utils';\nimport appJson from '../../../../../app';\nimport '../view/ToDoPanelView.scss';\nexport default class ToDoItem extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.updateToDo = () => {\n      this.props.updateToDo(this.props.toDoItem);\n    };\n\n    this.renderToDoItem = toDoItem => {\n      const status = this.props.toDoItem.toDoStatus.isCompleted;\n\n      switch (status) {\n        case false:\n          return React.createElement(\"span\", {\n            className: \"todo-item-wrapper\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 35\n            },\n            __self: this\n          }, React.createElement(\"span\", {\n            className: \"checkbox-btn\",\n            onClick: this.toggleCompleteToDo,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 36\n            },\n            __self: this\n          }, React.createElement(\"img\", {\n            className: \"checkbox-icon\",\n            src: checkBoxIcon,\n            alt: \"checkbox-icon\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 37\n            },\n            __self: this\n          })), React.createElement(NavLink, {\n            to: \"/todos/\" + toDoItem.toDoID,\n            className: \"todopanel-todo-link\",\n            onClick: this.updateToDo,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 40\n            },\n            __self: this\n          }, React.createElement(\"h2\", {\n            className: \"todo-item-text\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 41\n            },\n            __self: this\n          }, toDoItem.toDoName), this.showDueDate()), React.createElement(\"div\", {\n            className: \"star-level-container\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 44\n            },\n            __self: this\n          }, \" \", this.showStars()));\n\n        case true:\n          return React.createElement(\"span\", {\n            className: \"completed-item-wrapper\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 47\n            },\n            __self: this\n          }, React.createElement(\"span\", {\n            className: \"checkbox-filled-btn\",\n            onClick: this.toggleCompleteToDo,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 48\n            },\n            __self: this\n          }, React.createElement(\"img\", {\n            className: \"checkbox-filled-icon\",\n            src: checkBoxFilled,\n            alt: \"checkbox-Filled-icon\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 49\n            },\n            __self: this\n          })), React.createElement(NavLink, {\n            to: \"/todos/\" + this.props.toDoItem.toDoID,\n            className: \"todopanel-todo-link\",\n            onClick: this.updateToDo,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 52\n            },\n            __self: this\n          }, React.createElement(\"h2\", {\n            className: \"completed-item-text\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 53\n            },\n            __self: this\n          }, toDoItem.toDoName), this.showDueDate()), React.createElement(\"div\", {\n            className: \"star-level-container\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 56\n            },\n            __self: this\n          }, \" \", this.showStars()));\n\n        default:\n          return null;\n      }\n    };\n\n    this.toggleCompleteToDo = event => {\n      const currentList = findCurrentListOfToDoInJSON(this.props.toDoItem.listID);\n      const currentToDo = findCurrentToDoInJSON(currentList, this.props.toDoItem);\n      console.log(currentToDo);\n\n      if (event.target.className === 'checkbox-icon' || event.target.className === 'checkbox-btn') {\n        currentToDo.toDoStatus.isCompleted = true;\n      } else {\n        currentToDo.toDoStatus.isCompleted = false;\n      }\n\n      if (this.props.isSearchRendering) {\n        this.props.updateThisSearchPanel(appJson.listItems);\n        this.props.updateToDo(currentToDo);\n        return;\n      }\n\n      this.props.updateToDo(currentToDo);\n    };\n\n    this.showDueDate = () => {\n      const selectedDate = this.props.toDoItem.toDoDetails.dueDate;\n      if (selectedDate === null) return;\n      if (selectedDate !== undefined) return React.createElement(\"h2\", {\n        className: \"todo-item-date\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, this.setDateMessage(selectedDate));\n    };\n\n    this.showStars = () => {\n      const starCount = this.props.toDoItem.toDoDetails.starLevel;\n\n      if (starCount !== undefined) {\n        if (this.props.toDoItem.toDoStatus.isCompleted) {\n          return React.createElement(StarRatings, {\n            className: \"todo-item-star-rating\",\n            name: \"starLevel\",\n            rating: starCount,\n            numberOfStars: 5,\n            starEmptyColor: \"rgb(255, 255, 255)\",\n            starRatedColor: \"rgb(241, 241, 31)\",\n            starDimension: \"25px\",\n            starSpacing: \"0.1px\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 92\n            },\n            __self: this\n          });\n        } else {\n          return React.createElement(StarRatings, {\n            className: \"todo-item-star-rating\",\n            name: \"starLevel\",\n            rating: starCount,\n            numberOfStars: 5,\n            starRatedColor: \"rgb(241, 241, 31)\",\n            starHoverColor: \"rgb(241, 241, 31)\",\n            starDimension: \"25px\",\n            starSpacing: \"0.1px\",\n            changeRating: this.setStarLevel,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 101\n            },\n            __self: this\n          });\n        }\n      }\n    };\n\n    this.setStarLevel = newRating => {\n      this.updateStarLevelInJSON(newRating, this.props.toDoItem.listID, this.props.toDoItem);\n    };\n\n    this.updateStarLevelInJSON = (starLevel, listID, toDo) => {\n      const currentList = findCurrentListOfToDoInJSON(listID);\n      const currentToDo = findCurrentToDoInJSON(currentList, toDo);\n      currentToDo.toDoStatus.isStarred = true;\n      currentToDo.toDoDetails.starLevel = starLevel;\n      this.props.updateToDo(currentToDo);\n    };\n\n    this.readStarLevelFromJSON = () => {\n      if (this.props.selectedToDo === undefined) return;\n      const currentList = findCurrentListOfToDoInJSON(this.props.toDoItem.listID);\n      const currentToDo = findCurrentToDoInJSON(currentList, this.props.toDoItem);\n      return currentToDo.toDoDetails.starLevel;\n    };\n\n    this.setDateMessage = date => {\n      let dateMessage = \"\";\n      let selectedMonthAsNumber = \"\";\n      const currentDate = new Date().toDateString();\n      const selectedDate = date.toDateString();\n      const currDateArr = currentDate.split(\" \");\n      const selectedDateArr = selectedDate.split(\" \");\n      selectedMonthAsNumber = this.convertMonthToNumber(selectedDateArr);\n\n      if (currDateArr[1] === selectedDateArr[1] && currDateArr[3] === selectedDateArr[3]) {\n        if (currDateArr[2] === selectedDateArr[2]) {\n          dateMessage = \"Today\";\n        } else if (currDateArr[2] - selectedDateArr[2] === -1) {\n          dateMessage = \"Tomorrow\";\n        } else {\n          dateMessage = selectedDateArr[2] + \".\" + selectedMonthAsNumber + \".\" + selectedDateArr[3];\n        }\n      } else {\n        dateMessage = selectedDateArr[2] + \".\" + selectedMonthAsNumber + \".\" + selectedDateArr[3];\n      }\n\n      return dateMessage;\n    };\n\n    this.convertMonthToNumber = selectedDateArr => {\n      let month = \"\";\n\n      switch (selectedDateArr[1]) {\n        case 'Jan':\n          month = \"01\";\n          break;\n\n        case 'Feb':\n          month = \"02\";\n          break;\n\n        case 'Mar':\n          month = \"03\";\n          break;\n\n        case 'Apr':\n          month = \"04\";\n          break;\n\n        case 'May':\n          month = \"05\";\n          break;\n\n        case 'Jun':\n          month = \"06\";\n          break;\n\n        case 'Jul':\n          month = \"07\";\n          break;\n\n        case 'Aug':\n          month = \"08\";\n          break;\n\n        case 'Sep':\n          month = \"09\";\n          break;\n\n        case 'Oct':\n          month = \"10\";\n          break;\n\n        case 'Nov':\n          month = \"11\";\n          break;\n\n        case 'Dec':\n          month = \"12\";\n          break;\n\n        default:\n          month = -1;\n      }\n\n      return month;\n    };\n\n    this.renderToDoMenu = uniqueID => {\n      return React.createElement(Menu, {\n        id: uniqueID,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      }, React.createElement(Submenu, {\n        label: \"Move to-do to...\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }, React.createElement(Item, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }, \"Foo\"), React.createElement(Item, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }, \"Bar\")), React.createElement(Item, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        },\n        __self: this\n      }, \"Save as pdf \"), React.createElement(Separator, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      }), React.createElement(Item, {\n        onClick: this.removeToDo,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }, \"Remove to-do \"));\n    };\n\n    this.removeToDo = () => {\n      const answer = window.confirm(\"Are you sure remove this todo?\");\n      if (!answer) return;\n      const currentList = findCurrentListInJSON(this.props.selectedList);\n      const index = findCurrentToDoIndex(currentList, this.props.toDoItem);\n      if (index !== undefined) currentList.toDoItems.splice(index, 1);\n      this.props.updateToDo();\n\n      if (this.props.isSearchRendering) {\n        this.props.updateThisSearchPanel(appJson.listItems);\n        return;\n      }\n\n      this.props.updateList(currentList);\n    };\n  }\n\n  render() {\n    const toDoItem = this.props.toDoItem;\n    return React.createElement(Router, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }, React.createElement(MenuProvider, {\n      id: toDoItem.toDoID,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21\n      },\n      __self: this\n    }, this.renderToDoItem(toDoItem)), this.renderToDoMenu(toDoItem.toDoID));\n  }\n\n}","map":{"version":3,"sources":["/home/cemal-pro/Documents/Repos/todo-app/frontend/src/components/App/container/ToDoPanel/container/ToDoItem.js"],"names":["React","BrowserRouter","Router","NavLink","StarRatings","MenuProvider","Menu","Item","Separator","Submenu","findCurrentToDoInJSON","findCurrentToDoIndex","findCurrentListInJSON","findCurrentListOfToDoInJSON","appJson","ToDoItem","Component","updateToDo","props","toDoItem","renderToDoItem","status","toDoStatus","isCompleted","toggleCompleteToDo","checkBoxIcon","toDoID","toDoName","showDueDate","showStars","checkBoxFilled","event","currentList","listID","currentToDo","console","log","target","className","isSearchRendering","updateThisSearchPanel","listItems","selectedDate","toDoDetails","dueDate","undefined","setDateMessage","starCount","starLevel","setStarLevel","newRating","updateStarLevelInJSON","toDo","isStarred","readStarLevelFromJSON","selectedToDo","date","dateMessage","selectedMonthAsNumber","currentDate","Date","toDateString","currDateArr","split","selectedDateArr","convertMonthToNumber","month","renderToDoMenu","uniqueID","removeToDo","answer","window","confirm","selectedList","index","toDoItems","splice","updateList","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { BrowserRouter as Router, NavLink} from 'react-router-dom';\nimport StarRatings from 'react-star-ratings';\nimport { MenuProvider, Menu, Item, Separator, Submenu } from 'react-contexify';\n\nimport checkBoxIcon from '../../../../../assets/icons/checkbox-icon.svg';\nimport checkBoxFilled from '../../../../../assets/icons/checkbox-filled-icon.svg';\n\nimport { findCurrentToDoInJSON, findCurrentToDoIndex, findCurrentListInJSON, findCurrentListOfToDoInJSON } from '../../../utils';\n\nimport appJson from '../../../../../app';\n\nimport '../view/ToDoPanelView.scss';\n\nexport default class ToDoItem extends React.Component {\n\n  render() {\n    const toDoItem = this.props.toDoItem;\n    return (\n      <Router>\n        <MenuProvider id= {toDoItem.toDoID}>\n          { this.renderToDoItem(toDoItem) }\n        </MenuProvider>\n\n        { this.renderToDoMenu(toDoItem.toDoID) }\n      </Router>\n    );\n  }\n\n  updateToDo = () => { this.props.updateToDo(this.props.toDoItem) }\n\n  renderToDoItem = (toDoItem) => {\n    const status = this.props.toDoItem.toDoStatus.isCompleted;\n    switch(status) {\n      case false: return <span className=\"todo-item-wrapper\">\n                          <span className=\"checkbox-btn\" onClick={this.toggleCompleteToDo}>\n                            <img className=\"checkbox-icon\" src={checkBoxIcon} alt=\"checkbox-icon\"></img>\n                          </span>\n\n                          <NavLink to={\"/todos/\" + toDoItem.toDoID} className=\"todopanel-todo-link\" onClick= {this.updateToDo}>\n                            <h2 className=\"todo-item-text\">{toDoItem.toDoName}</h2>\n                            { this.showDueDate() }\n                          </NavLink>\n                          <div className=\"star-level-container\"> { this.showStars() }</div>\n                        </span>\n\n     case true: return <span className=\"completed-item-wrapper\">   \n                        <span className=\"checkbox-filled-btn\" onClick={this.toggleCompleteToDo}>\n                          <img className=\"checkbox-filled-icon\" src={checkBoxFilled} alt=\"checkbox-Filled-icon\"></img>\n                        </span>\n\n                        <NavLink to={\"/todos/\" + this.props.toDoItem.toDoID} className=\"todopanel-todo-link\" onClick={this.updateToDo}>\n                        <h2 className=\"completed-item-text\">{toDoItem.toDoName}</h2> \n                        { this.showDueDate() }\n                        </NavLink> \n                        <div className=\"star-level-container\"> { this.showStars() }</div>\n                      </span>\n\n     default : return null;\n    }\n  }\n\n  toggleCompleteToDo = (event) => {\n    const currentList = findCurrentListOfToDoInJSON(this.props.toDoItem.listID);\n    const currentToDo = findCurrentToDoInJSON(currentList, this.props.toDoItem);\n    console.log(currentToDo);\n    if (event.target.className === 'checkbox-icon' || event.target.className === 'checkbox-btn') {\n      currentToDo.toDoStatus.isCompleted = true;\n    } else {\n      currentToDo.toDoStatus.isCompleted = false;\n    }\n\n    if (this.props.isSearchRendering) {\n      this.props.updateThisSearchPanel(appJson.listItems);\n      this.props.updateToDo(currentToDo);\n      return;\n    }\n\n    this.props.updateToDo(currentToDo);\n  }\n\n  showDueDate = () => {\n    const selectedDate = this.props.toDoItem.toDoDetails.dueDate;\n    if (selectedDate === null) return;\n    if (selectedDate !== undefined) return <h2 className=\"todo-item-date\">{ this.setDateMessage(selectedDate) }</h2>\n  }\n\n  showStars = () => {\n    const starCount = this.props.toDoItem.toDoDetails.starLevel;\n    if (starCount !== undefined) {\n      if (this.props.toDoItem.toDoStatus.isCompleted) {\n        return  <StarRatings className=\"todo-item-star-rating\"\n        name='starLevel'\n        rating= {starCount}\n        numberOfStars={5}\n        starEmptyColor= 'rgb(255, 255, 255)'\n        starRatedColor= 'rgb(241, 241, 31)'\n        starDimension= '25px'\n        starSpacing= '0.1px'/>\n      } else {\n        return  <StarRatings className=\"todo-item-star-rating\"\n        name='starLevel'\n        rating= {starCount}\n        numberOfStars={5}\n        starRatedColor= 'rgb(241, 241, 31)'\n        starHoverColor= 'rgb(241, 241, 31)'\n        starDimension= '25px'\n        starSpacing= '0.1px'\n        changeRating= {this.setStarLevel}/>\n      }\n    }\n  }\n\n  setStarLevel = (newRating) => { this.updateStarLevelInJSON(newRating, this.props.toDoItem.listID, this.props.toDoItem) }\n\n  updateStarLevelInJSON = (starLevel, listID, toDo) => {\n    const currentList = findCurrentListOfToDoInJSON(listID);\n    const currentToDo = findCurrentToDoInJSON(currentList, toDo);\n\n    currentToDo.toDoStatus.isStarred = true;\n    currentToDo.toDoDetails.starLevel = starLevel;\n    this.props.updateToDo(currentToDo);\n  } \n\n  readStarLevelFromJSON = () => {\n    if (this.props.selectedToDo === undefined) return;\n    \n    const currentList = findCurrentListOfToDoInJSON(this.props.toDoItem.listID);\n    const currentToDo = findCurrentToDoInJSON(currentList, this.props.toDoItem);\n\n    return currentToDo.toDoDetails.starLevel;\n  }\n\n  setDateMessage = (date) => {\n    let dateMessage = \"\";\n    let selectedMonthAsNumber = \"\";\n\n    const currentDate = new Date().toDateString();\n    const selectedDate = date.toDateString();\n\n    const currDateArr = currentDate.split(\" \");\n    const selectedDateArr = selectedDate.split(\" \");\n\n    selectedMonthAsNumber = this.convertMonthToNumber(selectedDateArr);\n    if ((currDateArr[1] === selectedDateArr[1]) && currDateArr[3] === selectedDateArr[3]) {\n      if (currDateArr[2] === selectedDateArr[2]) {\n        dateMessage = \"Today\";\n      } else if (currDateArr[2] - selectedDateArr[2] === -1) {\n        dateMessage = \"Tomorrow\"\n      } else {\n        dateMessage = selectedDateArr[2] + \".\" + selectedMonthAsNumber + \".\" + selectedDateArr[3];  \n      }\n    } else {\n      dateMessage = selectedDateArr[2] + \".\" + selectedMonthAsNumber + \".\" + selectedDateArr[3];  \n    }\n    return dateMessage;\n  }\n\n  convertMonthToNumber = (selectedDateArr) => {\n    let month = \"\";\n\n    switch(selectedDateArr[1]) {\n      case 'Jan': month = \"01\"; break;\n      case 'Feb': month = \"02\"; break;\n      case 'Mar': month = \"03\"; break;\n      case 'Apr': month = \"04\"; break;\n      case 'May': month = \"05\"; break;\n      case 'Jun': month = \"06\"; break;\n      case 'Jul': month = \"07\"; break;\n      case 'Aug': month = \"08\"; break;\n      case 'Sep': month = \"09\"; break;\n      case 'Oct': month = \"10\"; break;\n      case 'Nov': month = \"11\"; break;\n      case 'Dec': month = \"12\"; break;\n      default: month = -1;\n    }\n    return month;\n  }\n\n  renderToDoMenu = (uniqueID) => {\n    return <Menu id= {uniqueID}>\n            <Submenu label= \"Move to-do to...\">\n              <Item >Foo</Item>\n              <Item >Bar</Item>\n            </Submenu>\n          \n            <Item >Save as pdf </Item>\n            <Separator />\n            <Item onClick={this.removeToDo}>Remove to-do </Item>\n           </Menu>\n  }\n\n  removeToDo = () => {\n    const answer = window.confirm(\"Are you sure remove this todo?\");\n    if (!answer) return;\n\n    const currentList = findCurrentListInJSON(this.props.selectedList);\n    const index = findCurrentToDoIndex(currentList, this.props.toDoItem);\n    \n    if (index !== undefined) currentList.toDoItems.splice(index, 1);\n    this.props.updateToDo();\n\n    if (this.props.isSearchRendering) {\n      this.props.updateThisSearchPanel(appJson.listItems);\n      return;\n    }\n    this.props.updateList(currentList);\n  }\n}"]},"metadata":{},"sourceType":"module"}