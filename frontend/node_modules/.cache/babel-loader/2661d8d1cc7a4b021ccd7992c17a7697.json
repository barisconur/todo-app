{"ast":null,"code":"var _jsxFileName = \"/home/cemal-pro/Documents/Repos/todo-app/frontend/src/components/App/container/ToDoPanel/container/StarredPanel.js\";\nimport React, { Fragment } from 'react';\nimport { Button } from 'react-bootstrap';\nimport ToDoItem from '../container/ToDoItem';\nimport Navbar from './Navbar';\nimport starIcon from \"../../../../../assets/background-images/star-big-icon.svg\";\nimport appJson from '../../../../../app';\nimport { orderToDoSet, getAllToDos, groupByListID } from '../../../utils';\nimport '../view/ToDoPanelView.scss';\n\nconst shortid = require('shortid');\n\nexport default class StarredPanel extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.setToDos = () => {\n      this.setState({\n        toDos: getAllToDos()\n      }, () => {\n        this.searchInSet(this.state.toDos);\n      });\n    };\n\n    this.searchInSet = todos => {\n      const foundedToDos = this.search(todos);\n      const toDoSet = groupByListID(foundedToDos);\n      const orderedToDoSet = orderToDoSet(toDoSet);\n      this.setState({\n        toDoSet: orderedToDoSet\n      });\n    };\n\n    this.search = list => {\n      if (list === undefined) return;\n      return list.filter(toDoItem => {\n        if (toDoItem.toDoStatus.isStarred) return true;\n        return false;\n      });\n    };\n\n    this.updateToDo = toDoItem => {\n      this.props.updateToDo(toDoItem);\n    };\n\n    this.renderToDoPanel = toDoSet => {\n      if (toDoSet === undefined) return;\n\n      if (toDoSet.length === 0) {\n        return this.renderNotFoundPanel();\n      } else {\n        return React.createElement(\"div\", {\n          className: \"all-items-container\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 72\n          },\n          __self: this\n        }, React.createElement(Navbar, {\n          newSelectedListName: this.props.selectedList.listName,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73\n          },\n          __self: this\n        }), this.renderToDoSet());\n      }\n    };\n\n    this.renderNotFoundPanel = () => {\n      return React.createElement(\"div\", {\n        className: \"not-found-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, \" \", this.renderNotFoundPageSrc(), \" \");\n    };\n\n    this.renderNotFoundPageSrc = () => {\n      if (this.props.selectedList.listID === undefined) return;\n      return React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        className: \"empty-list-img\",\n        src: starIcon,\n        alt: \"star-img\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }), React.createElement(\"h2\", {\n        className: \"empty-list-text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, \"You have no Starred to-do\"));\n    };\n\n    this.renderToDoSet = () => {\n      const toDoSet = this.state.toDoSet;\n\n      if (toDoSet !== undefined) {\n        return toDoSet.map(toDoGroup => {\n          const listName = toDoGroup[0].listName;\n          return React.createElement(\"div\", {\n            className: \"todo-items-container\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 96\n            },\n            __self: this\n          }, React.createElement(Button, {\n            variant: \"info\",\n            className: \"list-group-tag\",\n            onClick: () => this.renderSelectedList(listName),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 97\n            },\n            __self: this\n          }, listName), this.renderToDoGroupItem(toDoGroup));\n        });\n      }\n    };\n\n    this.renderToDoGroupItem = toDoGroup => {\n      return toDoGroup.map(toDoItem => {\n        return React.createElement(Fragment, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 108\n          },\n          __self: this\n        }, React.createElement(ToDoItem, {\n          toDoItem: toDoItem,\n          key: shortid.generate(),\n          c: true,\n          updateToDo: this.updateToDo,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109\n          },\n          __self: this\n        }));\n      });\n    };\n\n    this.renderSelectedList = listName => {\n      const listItems = appJson.listItems;\n      const currentIndex = listItems.findIndex(listItem => listItem.listName === listName);\n      const selectedList = listItems[currentIndex];\n      this.props.updateSelectedList(selectedList);\n    };\n\n    this.state = {\n      toDos: [],\n      toDoSet: []\n    };\n  }\n\n  componentWillMount() {\n    this.setToDos();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.selectedToDo !== prevProps.selectedToDo) {\n      console.log(\"buraya girdi mi\");\n      this.setToDos();\n    }\n  }\n\n  render() {\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, \" \", this.renderToDoPanel(this.state.toDoSet), \" \");\n  }\n\n}","map":{"version":3,"sources":["/home/cemal-pro/Documents/Repos/todo-app/frontend/src/components/App/container/ToDoPanel/container/StarredPanel.js"],"names":["React","Fragment","Button","ToDoItem","Navbar","appJson","orderToDoSet","getAllToDos","groupByListID","shortid","require","StarredPanel","Component","constructor","props","setToDos","setState","toDos","searchInSet","state","todos","foundedToDos","search","toDoSet","orderedToDoSet","list","undefined","filter","toDoItem","toDoStatus","isStarred","updateToDo","renderToDoPanel","length","renderNotFoundPanel","selectedList","listName","renderToDoSet","renderNotFoundPageSrc","listID","starIcon","map","toDoGroup","renderSelectedList","renderToDoGroupItem","generate","listItems","currentIndex","findIndex","listItem","updateSelectedList","componentWillMount","componentDidUpdate","prevProps","selectedToDo","console","log","render"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react';\nimport { Button } from 'react-bootstrap';\n\nimport ToDoItem from '../container/ToDoItem';\nimport Navbar from './Navbar';\n\nimport starIcon from '../../../../../assets/background-images/star-big-icon.svg';\n\nimport appJson from '../../../../../app';\n\nimport { orderToDoSet, getAllToDos, groupByListID } from '../../../utils';\n\nimport '../view/ToDoPanelView.scss';\n\nconst shortid = require('shortid');\n\nexport default class StarredPanel extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      toDos: [],\n      toDoSet: []\n    };\n  }\n\n  componentWillMount() { this.setToDos() }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.selectedToDo !== prevProps.selectedToDo) {\n      console.log(\"buraya girdi mi\");\n      this.setToDos();\n    }\n  }\n\n  setToDos = () => { \n    this.setState({ toDos: getAllToDos() }, () => {\n      this.searchInSet(this.state.toDos);\n    })\n  }\n\n  searchInSet = (todos) => { \n    const foundedToDos = this.search(todos);\n    const toDoSet = groupByListID(foundedToDos);\n    const orderedToDoSet = orderToDoSet(toDoSet);\n\n    this.setState({ toDoSet: orderedToDoSet });\n  }\n\n  search = (list) => {\n    if (list === undefined) return;\n    return list.filter((toDoItem) => {\n      if (toDoItem.toDoStatus.isStarred) return true;\n      return false;\n    });\n  }\n\n  updateToDo = (toDoItem) => {\n    this.props.updateToDo(toDoItem);\n  }\n\n  render() { \n    return <Fragment> { this.renderToDoPanel(this.state.toDoSet) } </Fragment>\n  }\n\n  renderToDoPanel = (toDoSet) => {\n    if (toDoSet === undefined) return;\n\n    if (toDoSet.length === 0) {\n      return this.renderNotFoundPanel();\n    } else {\n      return <div className=\"all-items-container\"> \n      <Navbar newSelectedListName= {this.props.selectedList.listName}></Navbar>\n      { this.renderToDoSet() }\n      </div>\n    }\n  }\n\n  renderNotFoundPanel = () => {\n    return <div className=\"not-found-container\"> { this.renderNotFoundPageSrc() } </div>\n  }\n\n  renderNotFoundPageSrc = () => {\n    if (this.props.selectedList.listID === undefined) return;\n    return <Fragment>\n            <img className=\"empty-list-img\" src={starIcon} alt=\"star-img\"></img>\n            <h2 className=\"empty-list-text\">You have no Starred to-do</h2>\n          </Fragment>\n  }\n\n  renderToDoSet = () => {\n    const toDoSet = this.state.toDoSet;\n    if (toDoSet !== undefined) {\n        return toDoSet.map((toDoGroup => {\n          const listName = toDoGroup[0].listName;\n          return <div className=\"todo-items-container\">\n                   <Button variant=\"info\" className=\"list-group-tag\" onClick={() =>this.renderSelectedList(listName)}>\n                     {listName} \n                   </Button>\n                   {this.renderToDoGroupItem(toDoGroup)}\n                 </div>\n        }))\n    }\n  }\n\n  renderToDoGroupItem = (toDoGroup) => {\n    return toDoGroup.map((toDoItem) => {\n      return <Fragment>\n              <ToDoItem toDoItem={toDoItem} key={shortid.generate()}c\n              updateToDo= {this.updateToDo} />\n            </Fragment>\n    })\n  }\n\n  renderSelectedList = (listName) => {\n    const listItems = appJson.listItems;\n    const currentIndex = listItems.findIndex(listItem => listItem.listName === listName);\n    const selectedList = listItems[currentIndex];\n    \n    this.props.updateSelectedList(selectedList);\n  }\n} \n"]},"metadata":{},"sourceType":"module"}