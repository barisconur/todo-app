{"ast":null,"code":"var _jsxFileName = \"/home/cemal-pro/Documents/Repos/todo-app/frontend/src/components/App/container/ToDoPanel/ToDoContentPanel/view/ToDoContentPanelView.js\";\nimport React, { Fragment } from 'react';\nimport InlineEdit from 'react-text-inline-edit';\nimport AddDate from '../container/AddDate';\nimport AddReminder from '../container/AddReminder';\nimport AddDescription from '../container/AddDescription';\nimport AddSubTask from '../container/AddSubTask';\nimport SubTask from '../container/SubTask';\nimport SetStarLevel from '../container/SetStarLevel';\nimport checkBoxIcon from \"../../../../../../assets/icons/checkbox-icon.svg\";\nimport checkboxFilled from \"../../../../../../assets/icons/checkbox-filled-icon.svg\";\nimport { findCurrentToDoInJSON, findCurrentListOfToDoInJSON } from '../../../../utils';\nimport '../view/ToDoContentPanelView.scss';\nexport default class ToDoContentPanelView extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.sendSelectedToDoToAppView = toDo => {\n      this.props.setSelectedToDo(toDo);\n    };\n\n    this.renderContentPanel = () => {\n      if (this.props.selectedToDo === undefined) return;\n\n      if (!this.props.selectedToDo.toDoStatus.isCompleted) {\n        return React.createElement(Fragment, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 34\n          },\n          __self: this\n        }, this.displayToDoName(), React.createElement(\"hr\", {\n          id: \"todo-header-first-line\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 36\n          },\n          __self: this\n        }), React.createElement(\"div\", {\n          className: \"todo-main-container\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 37\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"set-date-container\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 39\n          },\n          __self: this\n        }, React.createElement(AddDate, {\n          selectedList: this.props.selectedList,\n          selectedToDo: this.props.selectedToDo,\n          updateSelectedToDo: this.sendSelectedToDoToAppView,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 40\n          },\n          __self: this\n        })), React.createElement(\"div\", {\n          className: \"set-reminder-container\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 44\n          },\n          __self: this\n        }, React.createElement(AddReminder, {\n          selectedList: this.props.selectedList,\n          selectedToDo: this.props.selectedToDo,\n          updateSelectedToDo: this.sendSelectedToDoToAppView,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 45\n          },\n          __self: this\n        }), \" \"), React.createElement(\"hr\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48\n          },\n          __self: this\n        }), React.createElement(\"div\", {\n          className: \"set-star-level-container\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50\n          },\n          __self: this\n        }, React.createElement(SetStarLevel, {\n          selectedList: this.props.selectedList,\n          selectedToDo: this.props.selectedToDo,\n          updateSelectedToDo: this.sendSelectedToDoToAppView,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 51\n          },\n          __self: this\n        }))), React.createElement(\"hr\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 56\n          },\n          __self: this\n        }), React.createElement(\"div\", {\n          className: \"todo-description-container\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 57\n          },\n          __self: this\n        }, React.createElement(AddDescription, {\n          selectedList: this.props.selectedList,\n          selectedToDo: this.props.selectedToDo,\n          updateSelectedToDo: this.sendSelectedToDoToAppView,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58\n          },\n          __self: this\n        })), React.createElement(\"hr\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62\n          },\n          __self: this\n        }), React.createElement(\"div\", {\n          className: \"add-subtask-container\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 63\n          },\n          __self: this\n        }, React.createElement(AddSubTask, {\n          selectedList: this.props.selectedList,\n          selectedToDo: this.props.selectedToDo,\n          updateSelectedToDo: this.sendSelectedToDoToAppView,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 64\n          },\n          __self: this\n        })), React.createElement(\"div\", {\n          className: \"subtask-items-container\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 68\n          },\n          __self: this\n        }, this.renderSubtasks()));\n      } else {\n        return React.createElement(Fragment, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73\n          },\n          __self: this\n        }, this.displayToDoName(), React.createElement(\"hr\", {\n          id: \"todo-header-first-line\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75\n          },\n          __self: this\n        }), React.createElement(\"div\", {\n          className: \"todo-main-container\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 76\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"set-date-container\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78\n          },\n          __self: this\n        }, React.createElement(AddDate, {\n          selectedList: this.props.selectedList,\n          selectedToDo: this.props.selectedToDo,\n          updateSelectedToDo: this.sendSelectedToDoToAppView,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 79\n          },\n          __self: this\n        })), React.createElement(\"div\", {\n          className: \"set-reminder-container\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83\n          },\n          __self: this\n        }, React.createElement(AddReminder, {\n          selectedList: this.props.selectedList,\n          selectedToDo: this.props.selectedToDo,\n          updateSelectedToDo: this.sendSelectedToDoToAppView,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 84\n          },\n          __self: this\n        }), \" \"), React.createElement(\"hr\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 87\n          },\n          __self: this\n        }), React.createElement(\"div\", {\n          className: \"set-star-level-container\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 89\n          },\n          __self: this\n        }, React.createElement(SetStarLevel, {\n          selectedList: this.props.selectedList,\n          selectedToDo: this.props.selectedToDo,\n          updateSelectedToDo: this.sendSelectedToDoToAppView,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 90\n          },\n          __self: this\n        }))), React.createElement(\"hr\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95\n          },\n          __self: this\n        }), React.createElement(\"div\", {\n          className: \"todo-description-container\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96\n          },\n          __self: this\n        }, React.createElement(AddDescription, {\n          selectedList: this.props.selectedList,\n          selectedToDo: this.props.selectedToDo,\n          updateSelectedToDo: this.sendSelectedToDoToAppView,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97\n          },\n          __self: this\n        })), React.createElement(\"hr\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101\n          },\n          __self: this\n        }), React.createElement(\"div\", {\n          className: \"add-subtask-container\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102\n          },\n          __self: this\n        }, React.createElement(AddSubTask, {\n          selectedList: this.props.selectedList,\n          selectedToDo: this.props.selectedToDo,\n          updateSelectedToDo: this.sendSelectedToDoToAppView,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 103\n          },\n          __self: this\n        })), React.createElement(\"div\", {\n          className: \"subtask-items-container\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 107\n          },\n          __self: this\n        }, this.renderSubtasks()));\n      }\n    };\n\n    this.displayToDoName = () => {\n      switch (this.props.selectedToDo.toDoStatus.isCompleted) {\n        case false:\n          return React.createElement(\"div\", {\n            className: \"todo-header\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 116\n            },\n            __self: this\n          }, React.createElement(\"span\", {\n            className: \"checkbox-btn\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 117\n            },\n            __self: this\n          }, this.selectCheckBoxSource()), this.displayToDoHeader());\n\n        default:\n          return React.createElement(\"div\", {\n            className: \"completed-todo-header\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 122\n            },\n            __self: this\n          }, React.createElement(\"span\", {\n            className: \"checkbox-btn\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 123\n            },\n            __self: this\n          }, this.selectCheckBoxSource()), this.displayToDoHeader());\n      }\n    };\n\n    this.selectCheckBoxSource = () => {\n      switch (this.props.selectedToDo.toDoStatus.isCompleted) {\n        case false:\n          return React.createElement(\"img\", {\n            className: \"checkbox-icon\",\n            src: checkBoxIcon,\n            alt: \"checkbox-icon\",\n            onClick: this.toggleCompleteToDo,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 133\n            },\n            __self: this\n          });\n\n        default:\n          return React.createElement(\"img\", {\n            className: \"checkbox-filled-icon\",\n            src: checkboxFilled,\n            alt: \"checkbox-filled-icon\",\n            onClick: this.toggleCompleteToDo,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 134\n            },\n            __self: this\n          });\n      }\n    };\n\n    this.toggleCompleteToDo = event => {\n      const currentList = findCurrentListOfToDoInJSON(this.props.selectedToDo.listID);\n      const currentToDo = findCurrentToDoInJSON(currentList, this.props.selectedToDo);\n\n      if (event.target.className === 'checkbox-icon' || event.target.className === 'checkbox-btn') {\n        currentToDo.toDoStatus.isCompleted = true;\n      } else {\n        currentToDo.toDoStatus.isCompleted = false;\n      }\n\n      this.props.setSelectedToDo(currentToDo);\n    };\n\n    this.displayToDoHeader = () => {\n      switch (this.props.selectedToDo.toDoStatus.isCompleted) {\n        case false:\n          return React.createElement(InlineEdit, {\n            className: \"todo-item-text\",\n            validate: this.customValidateText,\n            activeClassName: \"editing\",\n            text: this.props.selectedToDo.toDoName,\n            paramName: \"text\",\n            change: this.renameToDoItem,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 153\n            },\n            __self: this\n          });\n\n        default:\n          return React.createElement(\"h2\", {\n            className: \"completed-item-text\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 160\n            },\n            __self: this\n          }, this.props.selectedToDo.toDoName);\n      }\n    };\n\n    this.renameToDoItem = data => {\n      const selectedToDo = this.props.selectedToDo;\n      selectedToDo.toDoName = data.text;\n      let newSelected = findCurrentToDoInJSON(this.props.selectedList, selectedToDo);\n      this.props.setSelectedToDo(newSelected);\n    };\n\n    this.customValidateText = text => text.length > 0 && text.length < 64;\n\n    this.renderSubtasks = () => {\n      const selectedToDo = this.props.selectedToDo;\n      if (selectedToDo === undefined) return;\n      const subTaskList = selectedToDo.toDoDetails.subTaskList;\n      return subTaskList.map(subTask => {\n        return React.createElement(SubTask, {\n          selectedList: this.props.selectedList,\n          selectedToDo: selectedToDo,\n          subTask: subTask,\n          key: subTask.subTaskID,\n          updateSelectedToDo: this.sendSelectedToDoToAppView,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 180\n          },\n          __self: this\n        });\n      });\n    };\n  }\n\n  render() {\n    console.log(this.props.selectedList);\n    console.log(this.props.selectedToDo);\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, \" \", this.renderContentPanel(), \" \");\n  }\n\n}","map":{"version":3,"sources":["/home/cemal-pro/Documents/Repos/todo-app/frontend/src/components/App/container/ToDoPanel/ToDoContentPanel/view/ToDoContentPanelView.js"],"names":["React","Fragment","InlineEdit","AddDate","AddReminder","AddDescription","AddSubTask","SubTask","SetStarLevel","findCurrentToDoInJSON","findCurrentListOfToDoInJSON","ToDoContentPanelView","Component","sendSelectedToDoToAppView","toDo","props","setSelectedToDo","renderContentPanel","selectedToDo","undefined","toDoStatus","isCompleted","displayToDoName","selectedList","renderSubtasks","selectCheckBoxSource","displayToDoHeader","checkBoxIcon","toggleCompleteToDo","checkboxFilled","event","currentList","listID","currentToDo","target","className","customValidateText","toDoName","renameToDoItem","data","text","newSelected","length","subTaskList","toDoDetails","map","subTask","subTaskID","render","console","log"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react';\nimport InlineEdit from 'react-text-inline-edit';\n\nimport AddDate from '../container/AddDate';\nimport AddReminder from '../container/AddReminder';\nimport AddDescription from '../container/AddDescription';\nimport AddSubTask from '../container/AddSubTask';\nimport SubTask from '../container/SubTask';\nimport SetStarLevel from '../container/SetStarLevel';\n\nimport checkBoxIcon from '../../../../../../assets/icons/checkbox-icon.svg';\nimport checkboxFilled from '../../../../../../assets/icons/checkbox-filled-icon.svg';\n\nimport { findCurrentToDoInJSON, findCurrentListOfToDoInJSON } from '../../../../utils';\n\nimport '../view/ToDoContentPanelView.scss';\n\n\nexport default class ToDoContentPanelView extends React.Component {\n\n  sendSelectedToDoToAppView = (toDo) => { this.props.setSelectedToDo(toDo) } \n\n  render() {\n    console.log(this.props.selectedList);\n    console.log(this.props.selectedToDo);\n    return (\n      <Fragment> { this.renderContentPanel() } </Fragment>\n    )\n  }\n\n  renderContentPanel = () => {\n    if (this.props.selectedToDo === undefined) return;\n    if (!this.props.selectedToDo.toDoStatus.isCompleted) {\n      return <Fragment>\n            { this.displayToDoName() }\n            <hr id=\"todo-header-first-line\"/>\n            <div className=\"todo-main-container\">\n\n              <div className=\"set-date-container\">\n              <AddDate selectedList={this.props.selectedList} selectedToDo={this.props.selectedToDo}\n              updateSelectedToDo={this.sendSelectedToDoToAppView}/> \n              </div>\n\n              <div className=\"set-reminder-container\"> \n              <AddReminder selectedList={this.props.selectedList} selectedToDo={this.props.selectedToDo}\n              updateSelectedToDo={this.sendSelectedToDoToAppView}\n              /> </div>\n              <hr/>\n\n              <div className=\"set-star-level-container\"> \n              <SetStarLevel  selectedList={this.props.selectedList} selectedToDo={this.props.selectedToDo}\n              updateSelectedToDo={this.sendSelectedToDoToAppView}/> \n              </div>\n        \n            </div>\n            <hr/>\n            <div className=\"todo-description-container\"> \n              <AddDescription selectedList={this.props.selectedList} selectedToDo={this.props.selectedToDo}\n              updateSelectedToDo={this.sendSelectedToDoToAppView}/> \n            </div>\n\n            <hr/>\n            <div className=\"add-subtask-container\"> \n              <AddSubTask selectedList={this.props.selectedList} selectedToDo={this.props.selectedToDo}\n              updateSelectedToDo={this.sendSelectedToDoToAppView}/> \n            </div>\n\n            <div className=\"subtask-items-container\">\n              { this.renderSubtasks() }\n            </div>\n          </Fragment>\n      } else {\n        return <Fragment>\n            { this.displayToDoName() }\n            <hr id=\"todo-header-first-line\"/>\n            <div className=\"todo-main-container\">\n\n              <div className=\"set-date-container\"> \n              <AddDate selectedList={this.props.selectedList} selectedToDo={this.props.selectedToDo}\n              updateSelectedToDo={this.sendSelectedToDoToAppView}/> \n              </div>\n\n              <div className=\"set-reminder-container\"> \n              <AddReminder selectedList={this.props.selectedList} selectedToDo={this.props.selectedToDo}\n              updateSelectedToDo={this.sendSelectedToDoToAppView}\n              /> </div>\n              <hr/>\n              \n              <div className=\"set-star-level-container\"> \n              <SetStarLevel  selectedList={this.props.selectedList} selectedToDo={this.props.selectedToDo}\n              updateSelectedToDo={this.sendSelectedToDoToAppView}/> \n              </div>\n        \n            </div>\n            <hr/>\n            <div className=\"todo-description-container\"> \n              <AddDescription selectedList={this.props.selectedList} selectedToDo={this.props.selectedToDo}\n              updateSelectedToDo={this.sendSelectedToDoToAppView}/> \n            </div>\n\n            <hr/>\n            <div className=\"add-subtask-container\"> \n              <AddSubTask selectedList={this.props.selectedList} selectedToDo={this.props.selectedToDo}\n              updateSelectedToDo={this.sendSelectedToDoToAppView}/> \n            </div>\n\n            <div className=\"subtask-items-container\">\n              { this.renderSubtasks() }\n            </div>\n          </Fragment>\n    }\n  }\n\n  displayToDoName = () => {\n    switch(this.props.selectedToDo.toDoStatus.isCompleted) {\n      case false: return <div className=\"todo-header\">\n                          <span className=\"checkbox-btn\">\n                            { this.selectCheckBoxSource() }\n                          </span>\n                          { this.displayToDoHeader() }\n                         </div>\n      default: return <div className=\"completed-todo-header\">\n                        <span className=\"checkbox-btn\">\n                          { this.selectCheckBoxSource() }\n                        </span>\n                        { this.displayToDoHeader() }\n                    </div>\n                    }\n  }\n\n  selectCheckBoxSource = () => {\n    switch(this.props.selectedToDo.toDoStatus.isCompleted) {\n      case false: return <img className=\"checkbox-icon\" src={checkBoxIcon} alt=\"checkbox-icon\" onClick={this.toggleCompleteToDo}></img>\n      default: return <img className=\"checkbox-filled-icon\" src={checkboxFilled} alt=\"checkbox-filled-icon\" onClick={this.toggleCompleteToDo}></img>\n    }\n  }\n\n  toggleCompleteToDo = (event) => {\n    const currentList = findCurrentListOfToDoInJSON(this.props.selectedToDo.listID);\n    const currentToDo = findCurrentToDoInJSON(currentList, this.props.selectedToDo);\n\n    if (event.target.className === 'checkbox-icon' || event.target.className === 'checkbox-btn') {\n      currentToDo.toDoStatus.isCompleted = true;\n    } else {\n      currentToDo.toDoStatus.isCompleted = false;\n    }\n\n    this.props.setSelectedToDo(currentToDo);\n  }\n\n  displayToDoHeader = () => {\n    switch (this.props.selectedToDo.toDoStatus.isCompleted) {\n      case false: return <InlineEdit className=\"todo-item-text\"\n                  validate={this.customValidateText}\n                  activeClassName=\"editing\"\n                  text={this.props.selectedToDo.toDoName}\n                  paramName=\"text\"\n                  change={this.renameToDoItem}/> \n\n      default: return <h2 className=\"completed-item-text\">{this.props.selectedToDo.toDoName}</h2>\n    }\n  }\n\n  renameToDoItem = (data) => {\n    const selectedToDo = this.props.selectedToDo;\n    selectedToDo.toDoName = data.text;\n    \n    let newSelected = findCurrentToDoInJSON(this.props.selectedList, selectedToDo);\n    this.props.setSelectedToDo(newSelected);\n  } \n\n  customValidateText = (text) => (text.length > 0 && text.length < 64);\n\n  renderSubtasks = () => {\n    const selectedToDo = this.props.selectedToDo;\n    if (selectedToDo === undefined) return;\n\n    const subTaskList = selectedToDo.toDoDetails.subTaskList;\n    return subTaskList.map((subTask) => {\n      return <SubTask selectedList={this.props.selectedList} selectedToDo={selectedToDo} subTask={subTask} key={subTask.subTaskID} \n      updateSelectedToDo={this.sendSelectedToDoToAppView}/> \n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}