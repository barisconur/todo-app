{"ast":null,"code":"var _jsxFileName = \"/home/cemal-pro/Documents/Repos/todo-app/frontend/src/components/App/container/ToDoPanel/ToDoContentPanel/container/SetStarLevel.js\";\nimport React, { Fragment } from 'react';\nimport StarRatings from 'react-star-ratings';\nimport clearIcon from \"../../../../../../assets/icons/clear-icon.svg\";\nimport { findCurrentToDoInJSON, findCurrentListOfToDoInJSON } from '../../../../utils';\nimport '../view/ToDoContentPanelView.scss';\nexport default class SetStarLevel extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderStarLevel = () => {\n      if (this.props.selectedToDo === undefined) return;\n\n      if (!this.props.selectedToDo.toDoStatus.isCompleted) {\n        return React.createElement(Fragment, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 25\n          },\n          __self: this\n        }, React.createElement(StarRatings, {\n          name: \"starLevel\",\n          rating: this.readStarLevelFromJSON(),\n          numberOfStars: 5,\n          starRatedColor: \"rgb(241, 241, 31)\",\n          starHoverColor: \"rgb(241, 241, 31)\",\n          starDimension: \"33px\",\n          starSpacing: \"2.5px\",\n          changeRating: this.setStarLevel,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 26\n          },\n          __self: this\n        }), this.showClearStarLevel());\n      } else {\n        return React.createElement(StarRatings, {\n          name: \"starLevel\",\n          rating: this.readStarLevelFromJSON(),\n          numberOfStars: 5,\n          starRatedColor: \"rgb(241, 241, 31)\",\n          starHoverColor: \"rgb(241, 241, 31)\",\n          starDimension: \"33px\",\n          starSpacing: \"2.5px\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 39\n          },\n          __self: this\n        });\n      }\n    };\n\n    this.respondStarDimension = () => {//TO-DO starDimensionları responsive yap\n    };\n\n    this.setStarLevel = newRating => {\n      this.updateStarLevelInJSON(newRating, this.props.selectedToDo);\n    };\n\n    this.updateStarLevelInJSON = (starLevel, toDo) => {\n      const currentList = findCurrentListOfToDoInJSON(this.props.selectedToDo.listID);\n      const currentToDo = findCurrentToDoInJSON(currentList, toDo);\n      currentToDo.toDoStatus.isStarred = true;\n\n      if (starLevel === 0) {\n        currentToDo.toDoStatus.isStarred = false;\n      }\n\n      currentToDo.toDoDetails.starLevel = starLevel;\n      this.props.updateSelectedToDo(currentToDo);\n    };\n\n    this.readStarLevelFromJSON = () => {\n      const currentList = findCurrentListOfToDoInJSON(this.props.selectedToDo.listID);\n      const currentToDo = findCurrentToDoInJSON(currentList, this.props.selectedToDo);\n      if (currentToDo === undefined) return; // if selected list is changes\n\n      return currentToDo.toDoDetails.starLevel;\n    };\n\n    this.showClearStarLevel = () => {\n      switch (this.readStarLevelFromJSON()) {\n        case 0:\n          return null;\n\n        default:\n          return React.createElement(\"span\", {\n            className: \"remove-star-wrapper\",\n            onClick: this.clearStarLevel,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 79\n            },\n            __self: this\n          }, React.createElement(\"img\", {\n            className: \"remove-icon\",\n            src: clearIcon,\n            alt: \"clear-icon\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 80\n            },\n            __self: this\n          }));\n      }\n    };\n\n    this.clearStarLevel = () => {\n      this.updateStarLevelInJSON(0, this.props.selectedToDo);\n    };\n  }\n\n  render() {\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      className: \"star-level-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    }, \"Star level: \"), this.renderStarLevel());\n  }\n\n}","map":{"version":3,"sources":["/home/cemal-pro/Documents/Repos/todo-app/frontend/src/components/App/container/ToDoPanel/ToDoContentPanel/container/SetStarLevel.js"],"names":["React","Fragment","StarRatings","findCurrentToDoInJSON","findCurrentListOfToDoInJSON","SetStarLevel","Component","renderStarLevel","props","selectedToDo","undefined","toDoStatus","isCompleted","readStarLevelFromJSON","setStarLevel","showClearStarLevel","respondStarDimension","newRating","updateStarLevelInJSON","starLevel","toDo","currentList","listID","currentToDo","isStarred","toDoDetails","updateSelectedToDo","clearStarLevel","clearIcon","render"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react';\nimport StarRatings from 'react-star-ratings';\n\nimport clearIcon from '../../../../../../assets/icons/clear-icon.svg';\n\nimport { findCurrentToDoInJSON, findCurrentListOfToDoInJSON } from '../../../../utils';\n\nimport '../view/ToDoContentPanelView.scss';\n\nexport default class SetStarLevel extends React.Component {\n\n  render() {\n    return (\n      <Fragment>\n        <h2 className=\"star-level-text\">Star level: </h2>\n        { this.renderStarLevel() }      \n      </Fragment>   \n    );\n  }\n\n  renderStarLevel = () => {\n    if (this.props.selectedToDo === undefined) return;\n    \n    if (!this.props.selectedToDo.toDoStatus.isCompleted) {\n      return <Fragment>\n               <StarRatings\n                name='starLevel'\n                rating= {this.readStarLevelFromJSON()}\n                numberOfStars={5}\n                starRatedColor= 'rgb(241, 241, 31)'\n                starHoverColor= 'rgb(241, 241, 31)'\n                starDimension= '33px'\n                starSpacing= '2.5px'\n                changeRating= {this.setStarLevel}/>\n\n                { this.showClearStarLevel() }\n            </Fragment>\n    } else {\n      return <StarRatings\n              name='starLevel'\n              rating= {this.readStarLevelFromJSON()}\n              numberOfStars={5}\n              starRatedColor= 'rgb(241, 241, 31)'\n              starHoverColor= 'rgb(241, 241, 31)'\n              starDimension= '33px'\n              starSpacing= '2.5px'/>\n    }\n  }\n\n  respondStarDimension = () => {\n    //TO-DO starDimensionları responsive yap\n  }\n\n  setStarLevel = (newRating) => { this.updateStarLevelInJSON(newRating, this.props.selectedToDo) }\n\n  updateStarLevelInJSON = (starLevel, toDo) => {\n    const currentList = findCurrentListOfToDoInJSON(this.props.selectedToDo.listID);\n    const currentToDo = findCurrentToDoInJSON(currentList, toDo);\n\n    currentToDo.toDoStatus.isStarred = true;\n    if (starLevel === 0) {\n      currentToDo.toDoStatus.isStarred = false;\n    }\n    currentToDo.toDoDetails.starLevel = starLevel; \n    this.props.updateSelectedToDo(currentToDo);\n  } \n\n  readStarLevelFromJSON = () => {\n    const currentList = findCurrentListOfToDoInJSON(this.props.selectedToDo.listID);\n    const currentToDo = findCurrentToDoInJSON(currentList, this.props.selectedToDo);    \n\n    if (currentToDo === undefined) return; // if selected list is changes\n    return currentToDo.toDoDetails.starLevel;\n  }\n\n  showClearStarLevel = () => {\n    switch(this.readStarLevelFromJSON()) {\n      case 0: return null;\n      default: return   <span className=\"remove-star-wrapper\" onClick={this.clearStarLevel}>\n                          <img className=\"remove-icon\" src={clearIcon} alt=\"clear-icon\"></img>\n                        </span>\n    }\n  }\n\n  clearStarLevel = () => { this.updateStarLevelInJSON(0, this.props.selectedToDo) }\n}"]},"metadata":{},"sourceType":"module"}