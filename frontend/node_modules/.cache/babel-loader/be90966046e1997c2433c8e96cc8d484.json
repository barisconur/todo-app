{"ast":null,"code":"var _jsxFileName = \"/home/cemal-pro/Documents/Repos/todo-app/frontend/src/components/App/container/ToDoPanel/ToDoContentPanel/container/AddDate.js\";\nimport React, { Fragment } from 'react';\nimport DatePicker from 'react-datepicker';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport dateIcon from \"../../../../../../assets/icons/date-icon.svg\";\nimport { findCurrentListOfToDoInJSON, findCurrentToDoInJSON } from '../../../../utils';\nimport '../view/ToDoContentPanelView.scss';\nexport default class AddDate extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderDatePicker = () => {\n      if (this.props.selectedToDo === undefined) return;\n\n      if (this.props.selectedToDo.toDoStatus.isCompleted) {\n        return React.createElement(DatePicker, {\n          placeholderText: \"Set due date\",\n          minDate: new Date(),\n          selected: this.readDueDateFromJSON(),\n          dateFormat: \"dd/MM/yyyy\",\n          disabled: true,\n          onChange: this.handleChange,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 28\n          },\n          __self: this\n        });\n      } else {\n        return React.createElement(DatePicker, {\n          placeholderText: \"Set due date\",\n          minDate: new Date(),\n          isClearable: true,\n          selected: this.readDueDateFromJSON(),\n          dateFormat: \"dd/MM/yyyy\",\n          onChange: this.handleChange,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 35\n          },\n          __self: this\n        });\n      }\n    };\n\n    this.handleChange = date => {\n      this.updateDueDateInJSON(date, this.props.selectedToDo);\n    };\n\n    this.updateDueDateInJSON = (date, toDo) => {\n      const currentList = findCurrentListOfToDoInJSON(this.props.selectedToDo.listID);\n      const currentToDo = findCurrentToDoInJSON(currentList, toDo);\n      currentToDo.toDoStatus.isDueTimeSet = true;\n      currentToDo.toDoDetails.dueDate = date;\n      this.props.updateSelectedToDo(currentToDo);\n    };\n\n    this.readDueDateFromJSON = () => {\n      const currentList = findCurrentListOfToDoInJSON(this.props.selectedToDo.listID);\n      const currentToDo = findCurrentToDoInJSON(currentList, this.props.selectedToDo);\n      if (currentToDo === undefined) return; // if selected list is changes\n\n      return currentToDo.toDoDetails.dueDate;\n    };\n  }\n\n  render() {\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"due-date-btn\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      className: \"date-icon\",\n      src: dateIcon,\n      alt: \"date-icon\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    })), this.renderDatePicker());\n  }\n\n}","map":{"version":3,"sources":["/home/cemal-pro/Documents/Repos/todo-app/frontend/src/components/App/container/ToDoPanel/ToDoContentPanel/container/AddDate.js"],"names":["React","Fragment","DatePicker","findCurrentListOfToDoInJSON","findCurrentToDoInJSON","AddDate","Component","renderDatePicker","props","selectedToDo","undefined","toDoStatus","isCompleted","Date","readDueDateFromJSON","handleChange","date","updateDueDateInJSON","toDo","currentList","listID","currentToDo","isDueTimeSet","toDoDetails","dueDate","updateSelectedToDo","render","dateIcon"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,OAAO,4CAAP;;AAIA,SAASC,2BAAT,EAAsCC,qBAAtC,QAAmE,mBAAnE;AAEA,OAAO,mCAAP;AAEA,eAAe,MAAMC,OAAN,SAAsBL,KAAK,CAACM,SAA5B,CAAsC;AAAA;AAAA;;AAAA,SAanDC,gBAbmD,GAahC,MAAM;AACvB,UAAI,KAAKC,KAAL,CAAWC,YAAX,KAA4BC,SAAhC,EAA2C;;AAE3C,UAAI,KAAKF,KAAL,CAAWC,YAAX,CAAwBE,UAAxB,CAAmCC,WAAvC,EAAoD;AAClD,eAAO,oBAAC,UAAD;AAAY,UAAA,eAAe,EAAC,cAA5B;AACC,UAAA,OAAO,EAAE,IAAIC,IAAJ,EADV;AAEC,UAAA,QAAQ,EAAE,KAAKC,mBAAL,EAFX;AAGC,UAAA,UAAU,EAAC,YAHZ;AAIC,UAAA,QAAQ,EAAE,IAJX;AAKC,UAAA,QAAQ,EAAE,KAAKC,YALhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAMD,OAPD,MAOO;AACL,eAAO,oBAAC,UAAD;AAAY,UAAA,eAAe,EAAC,cAA5B;AACC,UAAA,OAAO,EAAE,IAAIF,IAAJ,EADV;AAEC,UAAA,WAAW,EAAE,IAFd;AAGC,UAAA,QAAQ,EAAE,KAAKC,mBAAL,EAHX;AAIC,UAAA,UAAU,EAAC,YAJZ;AAKC,UAAA,QAAQ,EAAE,KAAKC,YALhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAMD;AACF,KA/BkD;;AAAA,SAiCnDA,YAjCmD,GAiCnCC,IAAD,IAAU;AAAE,WAAKC,mBAAL,CAAyBD,IAAzB,EAA+B,KAAKR,KAAL,CAAWC,YAA1C;AAAyD,KAjCjC;;AAAA,SAmCnDQ,mBAnCmD,GAmC7B,CAACD,IAAD,EAAOE,IAAP,KAAgB;AACpC,YAAMC,WAAW,GAAGhB,2BAA2B,CAAC,KAAKK,KAAL,CAAWC,YAAX,CAAwBW,MAAzB,CAA/C;AACA,YAAMC,WAAW,GAAGjB,qBAAqB,CAACe,WAAD,EAAcD,IAAd,CAAzC;AAEAG,MAAAA,WAAW,CAACV,UAAZ,CAAuBW,YAAvB,GAAsC,IAAtC;AACAD,MAAAA,WAAW,CAACE,WAAZ,CAAwBC,OAAxB,GAAkCR,IAAlC;AAEA,WAAKR,KAAL,CAAWiB,kBAAX,CAA8BJ,WAA9B;AACD,KA3CkD;;AAAA,SA6CnDP,mBA7CmD,GA6C7B,MAAM;AAC1B,YAAMK,WAAW,GAAGhB,2BAA2B,CAAC,KAAKK,KAAL,CAAWC,YAAX,CAAwBW,MAAzB,CAA/C;AACA,YAAMC,WAAW,GAAGjB,qBAAqB,CAACe,WAAD,EAAc,KAAKX,KAAL,CAAWC,YAAzB,CAAzC;AAEA,UAAIY,WAAW,KAAKX,SAApB,EAA+B,OAJL,CAIa;;AACvC,aAAOW,WAAW,CAACE,WAAZ,CAAwBC,OAA/B;AACD,KAnDkD;AAAA;;AAEnDE,EAAAA,MAAM,GAAG;AACP,WACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAM,MAAA,SAAS,EAAC,cAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAA2B,MAAA,GAAG,EAAEC,QAAhC;AAA0C,MAAA,GAAG,EAAC,WAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,EAII,KAAKpB,gBAAL,EAJJ,CADF;AAQD;;AAXkD","sourcesContent":["import React, { Fragment } from 'react';\nimport DatePicker from 'react-datepicker';\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nimport dateIcon from '../../../../../../assets/icons/date-icon.svg';\n\nimport { findCurrentListOfToDoInJSON, findCurrentToDoInJSON } from '../../../../utils';\n\nimport '../view/ToDoContentPanelView.scss';\n\nexport default class AddDate extends React.Component {\n  \n  render() {\n    return (\n      <Fragment>\n        <span className=\"due-date-btn\">\n          <img className=\"date-icon\" src={dateIcon} alt=\"date-icon\"></img>\n        </span>\n        { this.renderDatePicker() }\n      </Fragment>\n    );\n  }\n\n  renderDatePicker = () => {\n    if (this.props.selectedToDo === undefined) return;\n    \n    if (this.props.selectedToDo.toDoStatus.isCompleted) {\n      return <DatePicker placeholderText=\"Set due date\" \n              minDate={new Date()}\n              selected={this.readDueDateFromJSON()}\n              dateFormat=\"dd/MM/yyyy\"\n              disabled={true}\n              onChange={this.handleChange}/>\n    } else {\n      return <DatePicker placeholderText=\"Set due date\" \n              minDate={new Date()}\n              isClearable={true}\n              selected={this.readDueDateFromJSON()}\n              dateFormat=\"dd/MM/yyyy\"\n              onChange={this.handleChange}/>\n    }\n  }\n\n  handleChange = (date) => { this.updateDueDateInJSON(date, this.props.selectedToDo) }\n\n  updateDueDateInJSON = (date, toDo) => {\n    const currentList = findCurrentListOfToDoInJSON(this.props.selectedToDo.listID);\n    const currentToDo = findCurrentToDoInJSON(currentList, toDo);\n\n    currentToDo.toDoStatus.isDueTimeSet = true;\n    currentToDo.toDoDetails.dueDate = date; \n\n    this.props.updateSelectedToDo(currentToDo);\n  }\n\n  readDueDateFromJSON = () => {\n    const currentList = findCurrentListOfToDoInJSON(this.props.selectedToDo.listID);\n    const currentToDo = findCurrentToDoInJSON(currentList, this.props.selectedToDo);\n\n    if (currentToDo === undefined) return; // if selected list is changes\n    return currentToDo.toDoDetails.dueDate;\n  }\n\n}"]},"metadata":{},"sourceType":"module"}