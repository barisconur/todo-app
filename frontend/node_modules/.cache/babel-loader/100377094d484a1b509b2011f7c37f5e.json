{"ast":null,"code":"var _jsxFileName = \"/home/cemal-pro/Documents/Repos/todo-app/frontend/src/components/App/container/ListPanel/container/ListModificationModal.js\";\nimport React, { Fragment } from 'react';\nimport 'react-contexify/dist/ReactContexify.min.css';\nimport { Modal, InputGroup, FormControl, Button } from 'react-bootstrap';\nimport '../view/ListPanelView.scss';\nimport appJson from '../../../../../app';\nexport default class ListModal extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleEnterKey = event => {\n      if (event.key === 'Enter') {\n        this.renameList();\n      }\n    };\n\n    this.renameList = () => {\n      let newListName = this.state.modifiedListName;\n\n      if (this.isNotEmpty(newListName)) {\n        alert(\"Please enter not an empty text\");\n        return;\n      }\n\n      const listItems = appJson.listItems;\n      const currentList = this.props.listItem;\n      const renamedIndex = listItems.findIndex(listItem => listItem.listID === currentList.listID);\n      listItems[renamedIndex].listName = newListName;\n      currentList.listName = newListName;\n      this.props.sendModalUpdate(currentList);\n      this.props.updateList();\n    };\n\n    this.isNotEmpty = input => input.length === 0 ? true : false;\n\n    this.setInputComingFromUser = () => {\n      this.setState({\n        modifiedListName: this.userInput.current.value\n      });\n    };\n\n    this.userInput = React.createRef();\n    this.state = {\n      modifiedListName: \"\"\n    };\n  }\n\n  render() {\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, React.createElement(Modal, {\n      size: \"sm\",\n      show: this.props.isRenameModalOpen,\n      onHide: this.props.closeModal,\n      \"aria-labelledby\": \"example-modal-sizes-title-sm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, React.createElement(Modal.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, React.createElement(InputGroup, {\n      className: \"mb-3\",\n      onKeyPress: this.handleEnterKey,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, React.createElement(FormControl, {\n      ref: this.userInput,\n      type: \"text\",\n      maxLength: \"200\",\n      placeholder: \"New list name...\",\n      \"aria-label\": \"rename-list\",\n      \"aria-describedby\": \"basic-addon2\",\n      onChange: () => this.setInputComingFromUser(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }))), React.createElement(Modal.Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, React.createElement(Button, {\n      className: \"modal-close-btn\",\n      variant: \"secondary\",\n      onClick: this.props.closeModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, \" Close \"), React.createElement(Button, {\n      className: \"modal-register-btn\",\n      variant: \"primary\",\n      onClick: this.renameList,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, \" Save \"))));\n  }\n\n}","map":{"version":3,"sources":["/home/cemal-pro/Documents/Repos/todo-app/frontend/src/components/App/container/ListPanel/container/ListModificationModal.js"],"names":["React","Fragment","Modal","InputGroup","FormControl","Button","appJson","ListModal","Component","constructor","props","handleEnterKey","event","key","renameList","newListName","state","modifiedListName","isNotEmpty","alert","listItems","currentList","listItem","renamedIndex","findIndex","listID","listName","sendModalUpdate","updateList","input","length","setInputComingFromUser","setState","userInput","current","value","createRef","render","isRenameModalOpen","closeModal"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react';\nimport 'react-contexify/dist/ReactContexify.min.css';\n\nimport { Modal, InputGroup, FormControl, Button } from 'react-bootstrap';\n\nimport '../view/ListPanelView.scss';\n\nimport appJson from '../../../../../app';\n\nexport default class ListModal extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.userInput = React.createRef();\n\n    this.state = {\n      modifiedListName: \"\"\n    };\n\n  }\n\n  render() {\n    return (\n      <Fragment>\n        <Modal size=\"sm\" show={this.props.isRenameModalOpen}\n        onHide= {this.props.closeModal}\n        aria-labelledby=\"example-modal-sizes-title-sm\">\n          <Modal.Body>\n            <InputGroup className=\"mb-3\" onKeyPress={this.handleEnterKey}>\n              <FormControl\n                ref= {this.userInput}\n                type= \"text\"\n                maxLength= \"200\"\n                placeholder= \"New list name...\"\n                aria-label=\"rename-list\"\n                aria-describedby=\"basic-addon2\"\n                onChange={() => this.setInputComingFromUser()}/>\n            </InputGroup>\n          </Modal.Body>\n            \n          <Modal.Footer>\n            <Button className=\"modal-close-btn\" variant=\"secondary\" onClick={this.props.closeModal}> Close </Button>\n            <Button className=\"modal-register-btn\" variant=\"primary\" onClick={this.renameList}> Save </Button>\n          </Modal.Footer>\n        </Modal>\n      </Fragment>\n    );\n  }\n\n  handleEnterKey = (event) => {\n    if (event.key === 'Enter') { \n      this.renameList();\n    }\n  }\n\n  renameList = () => {\n    let newListName = this.state.modifiedListName;\n    if (this.isNotEmpty(newListName)) {\n      alert(\"Please enter not an empty text\");\n      return;\n    } \n  \n    const listItems = appJson.listItems;\n    const currentList = this.props.listItem;\n    const renamedIndex = listItems.findIndex(listItem => listItem.listID === currentList.listID);\n\n    listItems[renamedIndex].listName = newListName;\n    currentList.listName = newListName;\n\n    this.props.sendModalUpdate(currentList);\n    this.props.updateList();\n  }\n\n  isNotEmpty = (input) => (input.length === 0) ? true : false;\n\n  setInputComingFromUser = () => {\n    this.setState({\n      modifiedListName: this.userInput.current.value \n    })\n  } \n}"]},"metadata":{},"sourceType":"module"}