{"ast":null,"code":"var _jsxFileName = \"/home/cemal-pro/Documents/Repos/todo-app/frontend/src/components/App/container/ListPanel/view/ListPanelView.js\";\nimport React, { Fragment } from 'react';\nimport SearchContainer from '../container/SearchContainer';\nimport ButtonContainer from '../container/ButtonContainer';\nimport CreateItemModal from '../container/CreateItemModal';\nimport ListItem from '../container/ListItem';\nimport FolderItem from '../container/FolderItem';\nimport appJson from '../../../../../app';\nimport '../view/ListPanelView.scss';\n\nconst shortid = require('shortid');\n\nexport default class ListPanelView extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isModalShown: false,\n      whichModal: \"\"\n    };\n\n    this.sendSelectedListToAppView = selectedList => {\n      this.props.setSelectedList(selectedList);\n    };\n\n    this.sendSearchedWordToAppView = searchedWord => {\n      this.props.setSearchedWord(searchedWord);\n    };\n\n    this.renderStaticLists = () => {\n      const staticLists = appJson.listItems.slice(0, 4);\n      return staticLists.map(list => {\n        return React.createElement(ListItem, {\n          listItem: list,\n          key: shortid.generate(),\n          sendSelectedToView: this.sendSelectedListToAppView,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59\n          },\n          __self: this\n        });\n      });\n    };\n\n    this.renderFolderItems = () => {\n      return appJson.folderItems.map(folder => {\n        return React.createElement(FolderItem, {\n          folderItem: folder,\n          key: shortid.generate(),\n          updateFolder: this.updateFolder,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 65\n          },\n          __self: this\n        });\n      });\n    };\n\n    this.renderAddedLists = () => {\n      const newListItems = appJson.listItems.slice(4, appJson.listItems.length);\n      return newListItems.map(list => {\n        return React.createElement(ListItem, {\n          listItem: list,\n          key: shortid.generate(),\n          sendSelectedToView: this.sendSelectedListToAppView,\n          updateList: this.updateList,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 72\n          },\n          __self: this\n        });\n      });\n    };\n\n    this.updateList = () => {\n      Promise.resolve(appJson.listItems).then(updatedList => {\n        this.setState({\n          listItems: updatedList\n        });\n      });\n    };\n\n    this.updateFolder = () => {\n      Promise.resolve(appJson.folderItems).then(updatedFolder => {\n        this.setState({\n          folderItems: updatedFolder\n        });\n      });\n    };\n\n    this.openModalBox = modalName => {\n      this.setState({\n        isModalShown: true,\n        whichModal: modalName\n      });\n    };\n\n    this.closeModalBox = () => {\n      this.setState({\n        isModalShown: false\n      });\n    };\n  }\n\n  render() {\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, React.createElement(SearchContainer, {\n      sendSearchedWordToView: this.sendSearchedWordToAppView,\n      updateSearchField: this.props.updateSearchField,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"lists-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"static-lists-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, this.renderStaticLists()), React.createElement(\"div\", {\n      className: \"folder-items-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, this.renderFolderItems()), React.createElement(\"div\", {\n      className: \"list-items-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, this.renderAddedLists())), React.createElement(ButtonContainer, {\n      displayModal: this.openModalBox,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }), React.createElement(CreateItemModal, {\n      isModalShown: this.state.isModalShown,\n      closeModal: this.closeModalBox,\n      whichModal: this.state.whichModal,\n      sendSelectedListToAppView: this.sendSelectedListToAppView,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/home/cemal-pro/Documents/Repos/todo-app/frontend/src/components/App/container/ListPanel/view/ListPanelView.js"],"names":["React","Fragment","SearchContainer","ButtonContainer","CreateItemModal","ListItem","FolderItem","appJson","shortid","require","ListPanelView","Component","state","isModalShown","whichModal","sendSelectedListToAppView","selectedList","props","setSelectedList","sendSearchedWordToAppView","searchedWord","setSearchedWord","renderStaticLists","staticLists","listItems","slice","map","list","generate","renderFolderItems","folderItems","folder","updateFolder","renderAddedLists","newListItems","length","updateList","Promise","resolve","then","updatedList","setState","updatedFolder","openModalBox","modalName","closeModalBox","render","updateSearchField"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react';\n\nimport SearchContainer from '../container/SearchContainer';\nimport ButtonContainer from '../container/ButtonContainer';\nimport CreateItemModal from '../container/CreateItemModal';\n\nimport ListItem from '../container/ListItem';\nimport FolderItem from '../container/FolderItem';\n\nimport appJson from '../../../../../app';\n\nimport '../view/ListPanelView.scss';\n\nconst shortid = require('shortid');\n\nexport default class ListPanelView extends React.Component {\n  state = {\n    isModalShown: false,\n    whichModal: \"\",\n  }\n\n  sendSelectedListToAppView = (selectedList) => { this.props.setSelectedList(selectedList) }\n\n  sendSearchedWordToAppView = (searchedWord) => { this.props.setSearchedWord(searchedWord) }\n\n  render() {\n    return (\n      <Fragment>\n        <SearchContainer sendSearchedWordToView= {this.sendSearchedWordToAppView}\n        updateSearchField = {this.props.updateSearchField} />\n\n        <div className=\"lists-container\">\n          <div className=\"static-lists-container\">\n            { this.renderStaticLists() }\n          </div>\n\n          <div className=\"folder-items-container\">\n            { this.renderFolderItems() }\n          </div>\n\n          <div className=\"list-items-container\">\n            { this.renderAddedLists() }\n          </div>\n        </div>\n\n        <ButtonContainer displayModal= {this.openModalBox}/>\n\n        <CreateItemModal isModalShown= {this.state.isModalShown}\n                          closeModal= {this.closeModalBox}\n                          whichModal= {this.state.whichModal}\n                          sendSelectedListToAppView= {this.sendSelectedListToAppView}/>\n      </Fragment>\n    );\n  }\n\n  renderStaticLists = () => {\n    const staticLists = appJson.listItems.slice(0, 4);\n    return staticLists.map((list) => {\n      return <ListItem listItem={ list } key={shortid.generate()} sendSelectedToView={this.sendSelectedListToAppView}/>\n    })\n  }\n\n  renderFolderItems = () => {\n    return appJson.folderItems.map((folder => {\n      return <FolderItem folderItem={ folder } key={shortid.generate()} updateFolder={this.updateFolder}/>\n    }))\n  }\n\n  renderAddedLists = () => {\n    const newListItems = appJson.listItems.slice(4, appJson.listItems.length);\n    return newListItems.map((list) => {\n      return <ListItem listItem={ list } key={shortid.generate()} \n      sendSelectedToView={this.sendSelectedListToAppView} updateList={this.updateList}/>\n    })\n  }\n\n  updateList = () => {\n    Promise.resolve(appJson.listItems).then(updatedList => {\n      this.setState({\n        listItems: updatedList\n      });\n    })\n  }\n\n  updateFolder = () => {\n    Promise.resolve(appJson.folderItems).then(updatedFolder => {\n      this.setState({\n        folderItems: updatedFolder\n      });\n    })\n  }\n  \n  openModalBox = (modalName) => {\n    this.setState({\n      isModalShown: true,\n      whichModal: modalName\n    });\n  }\n\n  closeModalBox = () => {this.setState({ isModalShown: false })}\n}"]},"metadata":{},"sourceType":"module"}