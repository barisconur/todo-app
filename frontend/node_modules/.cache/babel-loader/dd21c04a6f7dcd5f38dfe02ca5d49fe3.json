{"ast":null,"code":"import appJson from '../../app';\nexport const isEmptyString = str => str.length === 0 ? true : false;\nexport const isEnterKeyPressed = ev => ev.key === 'Enter' ? true : false;\nexport const findCurrentListInJSON = list => appJson.listItems[findCurrentListIndex(list)];\nexport const findCurrentListOfToDoInJSON = listID => {\n  const index = appJson.listItems.findIndex(item => item.listID === listID);\n  return appJson.listItems[index];\n};\nexport const findSubTask = (list, toDo, subTask) => {\n  const currentList = list;\n  const currentToDo = findCurrentToDoInJSON(currentList, toDo);\n  const index = currentToDo.toDoDetails.subTaskList.findIndex(subTaskItem => subTaskItem.subTaskID === subTask.subTaskID);\n  return index;\n};\nexport const findCurrentToDoInJSON = (list, toDo) => {\n  const currentList = findCurrentListInJSON(list);\n  if (currentList === undefined) return;\n  return currentList.toDoItems[findCurrentToDoIndex(currentList, toDo)];\n};\nexport const findSubTaskInJSON = (list, toDo, subTask) => {\n  const currentList = findCurrentListInJSON(list);\n  const currentToDo = findCurrentToDoInJSON(currentList, toDo);\n  return currentToDo.toDoDetails.subTaskList[findSubTaskIndex(currentList, currentToDo, subTask)];\n};\nexport const findCurrentListIndex = list => {\n  if (list === undefined) return;\n  const index = appJson.listItems.findIndex(listItem => listItem.listID === list.listID);\n  return index;\n};\nexport const findCurrentToDoIndex = (list, toDo) => {\n  if (list === undefined) return;\n  const index = list.toDoItems.findIndex(toDoItem => toDoItem.toDoID === toDo.toDoID);\n  return index;\n};\nexport const findSubTaskIndex = (list, toDo, subTask) => {\n  const currentList = findCurrentListInJSON(list);\n  const currentToDo = findCurrentToDoInJSON(currentList, toDo);\n  const index = currentToDo.toDoDetails.subTaskList.findIndex(subTaskItem => subTaskItem.subTaskID === subTask.subTaskID);\n  return index;\n};\nexport const getAllToDos = () => {\n  const nonStaticLists = appJson.listItems.slice(4, appJson.listItems.length);\n  const lists = [appJson.listItems[0]].concat(nonStaticLists);\n  let todos = [];\n  lists.forEach(list => {\n    list.toDoItems.forEach(toDo => {\n      toDo.listID = list.listID;\n      toDo.listName = list.listName;\n      todos.push(toDo);\n    });\n  });\n  return todos;\n};\nexport const groupByListID = list => {\n  if (list === undefined) return;\n  let remainingList = list;\n  let groupArr = [];\n\n  while (remainingList.length !== 0) {\n    let listGroup = [];\n    let firstToDo = remainingList[0];\n    remainingList.splice(0, 1);\n    listGroup.push(firstToDo);\n\n    for (let i = 0; i < remainingList.length; i++) {\n      if (firstToDo.listID === remainingList[i].listID) {\n        listGroup.push(remainingList[i]);\n        remainingList.splice(i, 1);\n        i--;\n      }\n    }\n\n    groupArr.push(listGroup);\n    listGroup = [];\n  }\n\n  return groupArr;\n};\nexport const orderToDoSet = toDoSet => {\n  let newToDoSet = [];\n  toDoSet.forEach(toDoItems => {\n    let incompletedToDos = [];\n    let completedToDos = [];\n    let orderToDoArr = [];\n    toDoItems.forEach(toDoItem => {\n      if (!toDoItem.toDoStatus.isCompleted) {\n        incompletedToDos.push(toDoItem);\n      } else {\n        completedToDos.push(toDoItem);\n      }\n    });\n    orderToDoArr = incompletedToDos.concat(completedToDos);\n    newToDoSet.push(orderToDoArr);\n  });\n  return newToDoSet;\n};","map":{"version":3,"sources":["/home/cemal-pro/Documents/Repos/todo-app/frontend/src/components/App/utils.js"],"names":["appJson","isEmptyString","str","length","isEnterKeyPressed","ev","key","findCurrentListInJSON","list","listItems","findCurrentListIndex","findCurrentListOfToDoInJSON","listID","index","findIndex","item","findSubTask","toDo","subTask","currentList","currentToDo","findCurrentToDoInJSON","toDoDetails","subTaskList","subTaskItem","subTaskID","undefined","toDoItems","findCurrentToDoIndex","findSubTaskInJSON","findSubTaskIndex","listItem","toDoItem","toDoID","getAllToDos","nonStaticLists","slice","lists","concat","todos","forEach","listName","push","groupByListID","remainingList","groupArr","listGroup","firstToDo","splice","i","orderToDoSet","toDoSet","newToDoSet","incompletedToDos","completedToDos","orderToDoArr","toDoStatus","isCompleted"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,WAApB;AAEA,OAAO,MAAMC,aAAa,GAAIC,GAAD,IAAUA,GAAG,CAACC,MAAJ,KAAe,CAAhB,GAAqB,IAArB,GAA4B,KAA3D;AAEP,OAAO,MAAMC,iBAAiB,GAAIC,EAAD,IAASA,EAAE,CAACC,GAAH,KAAW,OAAZ,GAAuB,IAAvB,GAA8B,KAAhE;AAEP,OAAO,MAAMC,qBAAqB,GAAIC,IAAD,IAAUR,OAAO,CAACS,SAAR,CAAkBC,oBAAoB,CAACF,IAAD,CAAtC,CAAxC;AAEP,OAAO,MAAMG,2BAA2B,GAAIC,MAAD,IAAY;AACrD,QAAMC,KAAK,GAAGb,OAAO,CAACS,SAAR,CAAkBK,SAAlB,CAA4BC,IAAI,IAAIA,IAAI,CAACH,MAAL,KAAgBA,MAApD,CAAd;AACA,SAAOZ,OAAO,CAACS,SAAR,CAAkBI,KAAlB,CAAP;AACD,CAHM;AAIP,OAAO,MAAMG,WAAW,GAAG,CAACR,IAAD,EAAOS,IAAP,EAAaC,OAAb,KAAyB;AAClD,QAAMC,WAAW,GAAGX,IAApB;AACA,QAAMY,WAAW,GAAGC,qBAAqB,CAACF,WAAD,EAAcF,IAAd,CAAzC;AAEA,QAAMJ,KAAK,GAAGO,WAAW,CAACE,WAAZ,CAAwBC,WAAxB,CAAoCT,SAApC,CAA8CU,WAAW,IAAIA,WAAW,CAACC,SAAZ,KAA0BP,OAAO,CAACO,SAA/F,CAAd;AAEA,SAAOZ,KAAP;AAED,CARM;AAUP,OAAO,MAAMQ,qBAAqB,GAAG,CAACb,IAAD,EAAOS,IAAP,KAAgB;AACnD,QAAME,WAAW,GAAGZ,qBAAqB,CAACC,IAAD,CAAzC;AACA,MAAIW,WAAW,KAAKO,SAApB,EAA+B;AAC/B,SAAOP,WAAW,CAACQ,SAAZ,CAAsBC,oBAAoB,CAACT,WAAD,EAAcF,IAAd,CAA1C,CAAP;AACD,CAJM;AAMP,OAAO,MAAMY,iBAAiB,GAAG,CAACrB,IAAD,EAAOS,IAAP,EAAaC,OAAb,KAAyB;AACxD,QAAMC,WAAW,GAAGZ,qBAAqB,CAACC,IAAD,CAAzC;AACA,QAAMY,WAAW,GAAGC,qBAAqB,CAACF,WAAD,EAAcF,IAAd,CAAzC;AACA,SAAOG,WAAW,CAACE,WAAZ,CAAwBC,WAAxB,CAAoCO,gBAAgB,CAACX,WAAD,EAAcC,WAAd,EAA2BF,OAA3B,CAApD,CAAP;AACD,CAJM;AAMP,OAAO,MAAMR,oBAAoB,GAAIF,IAAD,IAAU;AAC5C,MAAIA,IAAI,KAAKkB,SAAb,EAAwB;AACxB,QAAMb,KAAK,GAAGb,OAAO,CAACS,SAAR,CAAkBK,SAAlB,CAA4BiB,QAAQ,IAAIA,QAAQ,CAACnB,MAAT,KAAoBJ,IAAI,CAACI,MAAjE,CAAd;AACA,SAAOC,KAAP;AACD,CAJM;AAMP,OAAO,MAAMe,oBAAoB,GAAG,CAACpB,IAAD,EAAOS,IAAP,KAAgB;AAClD,MAAIT,IAAI,KAAKkB,SAAb,EAAwB;AACxB,QAAMb,KAAK,GAAGL,IAAI,CAACmB,SAAL,CAAeb,SAAf,CAAyBkB,QAAQ,IAAIA,QAAQ,CAACC,MAAT,KAAoBhB,IAAI,CAACgB,MAA9D,CAAd;AACA,SAAOpB,KAAP;AACD,CAJM;AAMP,OAAO,MAAMiB,gBAAgB,GAAG,CAACtB,IAAD,EAAOS,IAAP,EAAaC,OAAb,KAAyB;AACvD,QAAMC,WAAW,GAAGZ,qBAAqB,CAACC,IAAD,CAAzC;AACA,QAAMY,WAAW,GAAGC,qBAAqB,CAACF,WAAD,EAAcF,IAAd,CAAzC;AAEA,QAAMJ,KAAK,GAAGO,WAAW,CAACE,WAAZ,CAAwBC,WAAxB,CAAoCT,SAApC,CAA8CU,WAAW,IAAIA,WAAW,CAACC,SAAZ,KAA0BP,OAAO,CAACO,SAA/F,CAAd;AAEA,SAAOZ,KAAP;AACD,CAPM;AASP,OAAO,MAAMqB,WAAW,GAAG,MAAM;AAC/B,QAAMC,cAAc,GAAGnC,OAAO,CAACS,SAAR,CAAkB2B,KAAlB,CAAwB,CAAxB,EAA2BpC,OAAO,CAACS,SAAR,CAAkBN,MAA7C,CAAvB;AACA,QAAMkC,KAAK,GAAG,CAACrC,OAAO,CAACS,SAAR,CAAkB,CAAlB,CAAD,EAAuB6B,MAAvB,CAA8BH,cAA9B,CAAd;AACA,MAAII,KAAK,GAAG,EAAZ;AAEAF,EAAAA,KAAK,CAACG,OAAN,CAAchC,IAAI,IAAI;AACpBA,IAAAA,IAAI,CAACmB,SAAL,CAAea,OAAf,CAAuBvB,IAAI,IAAI;AAC7BA,MAAAA,IAAI,CAACL,MAAL,GAAcJ,IAAI,CAACI,MAAnB;AACAK,MAAAA,IAAI,CAACwB,QAAL,GAAgBjC,IAAI,CAACiC,QAArB;AACAF,MAAAA,KAAK,CAACG,IAAN,CAAWzB,IAAX;AACD,KAJD;AAKD,GAND;AAQA,SAAOsB,KAAP;AACD,CAdM;AAgBP,OAAO,MAAMI,aAAa,GAAInC,IAAD,IAAU;AACrC,MAAIA,IAAI,KAAKkB,SAAb,EAAwB;AAExB,MAAIkB,aAAa,GAAGpC,IAApB;AACA,MAAIqC,QAAQ,GAAG,EAAf;;AAEA,SAAOD,aAAa,CAACzC,MAAd,KAAyB,CAAhC,EAAmC;AACjC,QAAI2C,SAAS,GAAG,EAAhB;AACA,QAAIC,SAAS,GAAGH,aAAa,CAAC,CAAD,CAA7B;AACAA,IAAAA,aAAa,CAACI,MAAd,CAAqB,CAArB,EAAwB,CAAxB;AACAF,IAAAA,SAAS,CAACJ,IAAV,CAAeK,SAAf;;AAEA,SAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,aAAa,CAACzC,MAAlC,EAA0C8C,CAAC,EAA3C,EAA+C;AAC7C,UAAIF,SAAS,CAACnC,MAAV,KAAqBgC,aAAa,CAACK,CAAD,CAAb,CAAiBrC,MAA1C,EAAkD;AAChDkC,QAAAA,SAAS,CAACJ,IAAV,CAAeE,aAAa,CAACK,CAAD,CAA5B;AACAL,QAAAA,aAAa,CAACI,MAAd,CAAqBC,CAArB,EAAwB,CAAxB;AACAA,QAAAA,CAAC;AACF;AACF;;AACDJ,IAAAA,QAAQ,CAACH,IAAT,CAAcI,SAAd;AACAA,IAAAA,SAAS,GAAG,EAAZ;AACD;;AAED,SAAOD,QAAP;AACD,CAxBM;AA0BP,OAAO,MAAMK,YAAY,GAAIC,OAAD,IAAa;AACvC,MAAIC,UAAU,GAAG,EAAjB;AAEED,EAAAA,OAAO,CAACX,OAAR,CAAgBb,SAAS,IAAI;AAC3B,QAAI0B,gBAAgB,GAAG,EAAvB;AACA,QAAIC,cAAc,GAAG,EAArB;AACA,QAAIC,YAAY,GAAI,EAApB;AAEA5B,IAAAA,SAAS,CAACa,OAAV,CAAmBR,QAAD,IAAc;AAC9B,UAAI,CAACA,QAAQ,CAACwB,UAAT,CAAoBC,WAAzB,EAAsC;AACtCJ,QAAAA,gBAAgB,CAACX,IAAjB,CAAsBV,QAAtB;AACC,OAFD,MAEO;AACPsB,QAAAA,cAAc,CAACZ,IAAf,CAAoBV,QAApB;AACC;AACF,KAND;AAOAuB,IAAAA,YAAY,GAAGF,gBAAgB,CAACf,MAAjB,CAAwBgB,cAAxB,CAAf;AACAF,IAAAA,UAAU,CAACV,IAAX,CAAgBa,YAAhB;AACD,GAdD;AAgBA,SAAOH,UAAP;AACH,CApBM","sourcesContent":["import appJson from '../../app';\n\nexport const isEmptyString = (str) => (str.length === 0) ? true : false;\n\nexport const isEnterKeyPressed = (ev) => (ev.key === 'Enter') ? true : false;\n\nexport const findCurrentListInJSON = (list) => appJson.listItems[findCurrentListIndex(list)] \n\nexport const findCurrentListOfToDoInJSON = (listID) => {\n  const index = appJson.listItems.findIndex(item => item.listID === listID);\n  return appJson.listItems[index];\n}\nexport const findSubTask = (list, toDo, subTask) => {\n  const currentList = list;\n  const currentToDo = findCurrentToDoInJSON(currentList, toDo);\n\n  const index = currentToDo.toDoDetails.subTaskList.findIndex(subTaskItem => subTaskItem.subTaskID === subTask.subTaskID);\n\n  return index;\n\n}\n\nexport const findCurrentToDoInJSON = (list, toDo) => {\n  const currentList = findCurrentListInJSON(list);\n  if (currentList === undefined) return;\n  return currentList.toDoItems[findCurrentToDoIndex(currentList, toDo)];\n}\n\nexport const findSubTaskInJSON = (list, toDo, subTask) => {\n  const currentList = findCurrentListInJSON(list);\n  const currentToDo = findCurrentToDoInJSON(currentList, toDo);\n  return currentToDo.toDoDetails.subTaskList[findSubTaskIndex(currentList, currentToDo, subTask)];\n}\n\nexport const findCurrentListIndex = (list) => {\n  if (list === undefined) return;\n  const index = appJson.listItems.findIndex(listItem => listItem.listID === list.listID);\n  return index;\n}\n\nexport const findCurrentToDoIndex = (list, toDo) => {\n  if (list === undefined) return;\n  const index = list.toDoItems.findIndex(toDoItem => toDoItem.toDoID === toDo.toDoID);\n  return index;\n}\n\nexport const findSubTaskIndex = (list, toDo, subTask) => {\n  const currentList = findCurrentListInJSON(list);\n  const currentToDo = findCurrentToDoInJSON(currentList, toDo);\n\n  const index = currentToDo.toDoDetails.subTaskList.findIndex(subTaskItem => subTaskItem.subTaskID === subTask.subTaskID);\n\n  return index;\n}\n\nexport const getAllToDos = () => {\n  const nonStaticLists = appJson.listItems.slice(4, appJson.listItems.length);\n  const lists = [appJson.listItems[0]].concat(nonStaticLists);\n  let todos = [];\n\n  lists.forEach(list => {\n    list.toDoItems.forEach(toDo => {\n      toDo.listID = list.listID;\n      toDo.listName = list.listName;\n      todos.push(toDo);\n    }) \n  }); \n  \n  return todos;\n}\n\nexport const groupByListID = (list) => {\n  if (list === undefined) return;\n\n  let remainingList = list;\n  let groupArr = [];\n\n  while (remainingList.length !== 0) {\n    let listGroup = [];\n    let firstToDo = remainingList[0];\n    remainingList.splice(0, 1); \n    listGroup.push(firstToDo);\n\n    for (let i = 0; i < remainingList.length; i++) {\n      if (firstToDo.listID === remainingList[i].listID) {\n        listGroup.push(remainingList[i]);\n        remainingList.splice(i, 1);\n        i--;\n      }\n    }\n    groupArr.push(listGroup);\n    listGroup = [];\n  }\n\n  return groupArr;\n}\n\nexport const orderToDoSet = (toDoSet) => {\n  let newToDoSet = [];\n\n    toDoSet.forEach(toDoItems => {\n      let incompletedToDos = [];\n      let completedToDos = [];\n      let orderToDoArr  = [];\n\n      toDoItems.forEach((toDoItem) => {\n        if (!toDoItem.toDoStatus.isCompleted) {\n        incompletedToDos.push(toDoItem);\n        } else { \n        completedToDos.push(toDoItem);\n        }\n      })\n      orderToDoArr = incompletedToDos.concat(completedToDos);\n      newToDoSet.push(orderToDoArr);\n    });\n\n    return newToDoSet;\n}\n\n\n"]},"metadata":{},"sourceType":"module"}